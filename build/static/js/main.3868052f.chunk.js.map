{"version":3,"sources":["utils/csvParse.js","components/Method.js","utils/dataUtils.js","components/FileSelector.js","components/MethodSelect.js","components/Report/Blank.js","components/Report/Sample.js","components/Report/Duplicate.js","components/Report/Calibration.js","components/Report/SampleBlock.js","components/Report/HeaderInfo.js","components/Report/CheckStd.js","components/Report/ReferenceMaterial.js","components/Report/index.js","App.js","index.js"],"names":["module","exports","input","splitFileData","split","fieldNames","trim","i","length","currentFieldName","toLowerCase","join","parsedData","lineItems","currentLineObject","j","push","Method","method","name","className","style","textAlign","paddingTop","description","duplicateTolerance","sigFigs","calStandards","elements","map","e","key","borderTop","units","u","blanks","b","LOQs","loq","checkStds","c","expectedValues","referenceMaterials","r","Fragment","rangesLow","borderBottom","rangesHigh","output","data","dupRegEx","RegExp","firstElementMass","mass","massesPresent","parseInt","elementCount","sort","a","values","Array","findMassIndex","findIndex","m","Number","concentration","sample_name","match","dupValues","sampleObject","id","number","oom","result","Math","pow","round","toPrecision","FileSelector","setError","setData","history","useHistory","height","padding","type","onChange","event","preventDefault","inputFile","target","files","console","log","reader","FileReader","readAsText","onloadend","jsonData","csvParse","dataUtils","MethodSelect","error","methods","setMethod","nameFromUrl","useParams","useEffect","find","color","width","to","onClick","Blank","blank","v","hasLOQ","passes","Sample","coloured","parseFloat","Samples","samples","s","Duplicate","methodBlanks","lowestLOQs","blankType","currentLOQ","getLowestLOQs","idx","averageValue","average","RPD","abs","toFixed","aboveLOQ","std","SampleBlock","props","children","HeaderInfo","CheckStd","checkStd","tolerance","limitLow","limitHigh","withinRange","ReferenceMaterial","material","hasRange","Report","sampleIdRegEx","Helmet","charSet","d","sampleBlank","referenceMaterial","duplicate","sample","calData","slice","Calibration","prevSampleExists","prevSampleIsSample","prevSampleIsDup","sampleList","stillASample","isASample","isADup","Date","now","App","useState","setMethods","axios","get","then","response","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3868052f.chunk.js","sourcesContent":["\r\nconst csvParser = (input) => {\r\n\r\n  const fileData = input;\r\n\r\n  const splitFileData = fileData.split(\"\\n\");\r\n\r\n  const fieldNames = splitFileData[0].trim().split(\",\");\r\n\r\n  // modify field names to not allow spaces -> replace with underscore\r\n  for (let i = 0; i < fieldNames.length; i++) {\r\n    let currentFieldName = fieldNames[i];\r\n    currentFieldName = fieldNames[i].toLowerCase();\r\n    const isMultipleWords = fieldNames[i].split(\" \").length > 1;\r\n    if (isMultipleWords) {\r\n      currentFieldName = currentFieldName.split(\" \").join(\"_\");\r\n    }\r\n    fieldNames[i] = currentFieldName;\r\n  }\r\n\r\n  let parsedData = [];\r\n\r\n  for (let i = 1; i < splitFileData.length; i++) {\r\n    const currentLine = splitFileData[i];\r\n    const lineItems = currentLine.split(\",\");\r\n    let currentLineObject = {};\r\n\r\n    for (let j = 0; j < lineItems.length; j++) {\r\n      currentLineObject[fieldNames[j]] = lineItems[j];\r\n    }\r\n\r\n    if (currentLineObject[fieldNames[0]].length > 0) {\r\n      parsedData.push(currentLineObject);\r\n    }\r\n\r\n  }\r\n\r\n  return parsedData;\r\n\r\n}\r\n\r\nmodule.exports = csvParser;","import React from 'react'\r\n\r\nconst Method = ({ method }) => {\r\n  if (method && method.name) {\r\n    return <div className='centeredContainerParent'>\r\n      <div className='centeredContainerChild' style={{ textAlign: 'left', paddingTop: '15px' }}>\r\n        <h2>{method.name}</h2>\r\n        <h3>{method.description}</h3>\r\n\r\n        <h4>Percent RPD for duplicates: {method.duplicateTolerance}</h4>\r\n        <h4>Number of significant figures on report: {method.sigFigs}</h4>\r\n\r\n        <p>Calibration Standard concentrations: {method.calStandards.join(', ')}</p>\r\n\r\n        <table className='methodTable stripedTable'>\r\n\r\n          <thead>\r\n            <tr>\r\n              <th className='firstCol'>Elements</th>\r\n              {method.elements.map(e =>\r\n                <th key={e}>{e}</th>\r\n              )}\r\n            </tr>\r\n          </thead>\r\n\r\n          <tbody>\r\n\r\n            <tr style={{ borderTop: '1px solid grey' }}>\r\n              <td className='firstCol'>Units</td>\r\n              {method.units.map((u, i) =>\r\n                <td key={u + i}>{u}</td>\r\n              )}\r\n            </tr>\r\n\r\n            {method.blanks.map((b, i) =>\r\n              <tr key={b.name + i} style={i === 0 ? { borderTop: '1px solid grey' } : null}>\r\n                <td className='firstCol'>{b.name} LOQs</td>\r\n                {b.LOQs.map((loq, i) =>\r\n                  <td key={i}>{loq || '- -'}</td>\r\n                )}\r\n              </tr>\r\n            )}\r\n\r\n            {method.checkStds.map((c, i) =>\r\n              <tr key={c.name + i} style={i === 0 ? { borderTop: '1px solid grey' } : null}>\r\n                <td className='firstCol'>{c.name}</td>\r\n                {c.expectedValues.map((e, i) =>\r\n                  <td key={i}>{e}</td>\r\n                )}\r\n              </tr>\r\n            )}\r\n\r\n            {method.referenceMaterials.map((r, i) =>\r\n              <React.Fragment key={r.name} >\r\n                <tr style={{ borderTop: '1px solid grey' }}>\r\n                  <td className='firstCol'>{r.name} Low</td>\r\n                  {r.rangesLow.map((e, i) =>\r\n                    <td key={i}>{e || '- -'}</td>\r\n                  )}\r\n                </tr><tr style={{ borderBottom: '1px solid grey' }}>\r\n                  <td className='firstCol'>{r.name} High</td>\r\n                  {r.rangesHigh.map((e, i) =>\r\n                    <td key={i}>{e || '- -'}</td>\r\n                  )}\r\n                </tr>\r\n              </React.Fragment>\r\n            )}\r\n\r\n          </tbody>\r\n\r\n        </table>\r\n      </div>\r\n    </div>\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n\r\nexport default Method","\r\nconst parseJsonData = (output) => {\r\n\r\n  const data = []\r\n  const dupRegEx = new RegExp(' (d|dup)', 'i')\r\n\r\n  const firstElementMass = output[0].mass\r\n  let i = 1;\r\n  let massesPresent = [parseInt(output[0].mass)]\r\n  while (output[i].mass !== firstElementMass) {\r\n    massesPresent.push(parseInt(output[i].mass))\r\n    i++;\r\n  }\r\n  const elementCount = i;\r\n  massesPresent.sort((a, b) => a - b)\r\n\r\n  for (let i = 0; i < output.length; i += elementCount) {\r\n\r\n    let values = new Array(elementCount)\r\n    let units = []\r\n\r\n    for (let j = 0; j < elementCount; j++) {\r\n      const findMassIndex = massesPresent.findIndex(m => m === parseInt(output[i + j].mass))\r\n      values[findMassIndex] = Number(output[i + j].concentration)\r\n      units.push(output[i + j].units)\r\n    }\r\n\r\n    if (data.length > 1 && output[i].sample_name.match(dupRegEx)) {\r\n      data[data.length - 1].dupValues = values\r\n    } else {\r\n      const sampleObject = {\r\n        id: output[i].sample_name,\r\n        values,\r\n        dupValues: null,\r\n        units\r\n      }\r\n      data.push(sampleObject)\r\n    }\r\n  }\r\n  return data\r\n}\r\n\r\nconst roundToSigFigs = (number, sigFigs) => {\r\n  let oom = 0;\r\n  let result = Number(number);\r\n\r\n  if (number > 10) {\r\n    while (result > 10) {\r\n      result /= 10;\r\n      oom += 1;\r\n    }\r\n  }\r\n  else if (number < 0.0001 && number > 0) {\r\n    return '0.00'\r\n  }\r\n  else if (number < 10) {\r\n    while (result < 1 && result > 0) {\r\n      if (result < 0) {\r\n        result = result * (-1);\r\n      }\r\n      result = result * 10;\r\n      oom += 1;\r\n    }\r\n  }\r\n  if (number > 10) {\r\n    result = number / Math.pow(10, oom);\r\n    result = result * Math.pow(10, sigFigs - 1);\r\n    result = Math.round(result)\r\n    result = result / Math.pow(10, sigFigs - oom - 1)\r\n    result = result.toPrecision(sigFigs)\r\n\r\n  } else if (number < 0) {\r\n    result = number * Math.pow(10, sigFigs + 1);\r\n    result = Math.round(result);\r\n    result = result / Math.pow(10, sigFigs + 1)\r\n    result.toPrecision(sigFigs)\r\n\r\n  } else if (number < 1) {\r\n    result = number * Math.pow(10, oom);\r\n    result = result * Math.pow(10, sigFigs - 1)\r\n    result = Math.round(result)\r\n    result = result / Math.pow(10, sigFigs + oom - 1)\r\n    result = result.toPrecision(sigFigs)\r\n\r\n  }\r\n  else {\r\n    result = (number.toPrecision(sigFigs));\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nexport default { parseJsonData, roundToSigFigs }","import React from 'react'\r\n\r\nimport dataUtils from '../utils/dataUtils'\r\nimport csvParse from '../utils/csvParse'\r\n\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst FileSelector = ({ setError, setData, method }) => {\r\n  const history = useHistory()\r\n  const fileHandler = (event) => {\r\n    event.preventDefault()\r\n    const inputFile = event.target.files[0]\r\n    if (inputFile.type !== \"text/plain\") {\r\n      console.log(\"wrong file type\")\r\n      setError(\"Please use a text file\")\r\n      return\r\n    }\r\n    history.push('/report')\r\n\r\n    const reader = new FileReader()\r\n    reader.readAsText(inputFile)\r\n    reader.onloadend = () => {\r\n      const jsonData = csvParse(reader.result)\r\n      const parsedData = dataUtils.parseJsonData(jsonData)\r\n      setData(parsedData)\r\n    }\r\n  }\r\n  return (\r\n    <div className='centeredContainerParent' style={{ height: '60px', padding: '25px' }}>\r\n      <div className='centeredContainerChild'>\r\n        {method.name && <input type=\"file\" id=\"inputFile\" name=\"inputFile\" onChange={fileHandler} />}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FileSelector","import React, { useEffect } from 'react'\r\nimport { Link, useParams } from 'react-router-dom'\r\n\r\nimport Method from './Method'\r\nimport FileSelector from './FileSelector'\r\n\r\nconst MethodSelect = ({ error, method, methods, setData, setError, setMethod }) => {\r\n\r\n  const nameFromUrl = useParams().name\r\n  useEffect(() => {\r\n    if (nameFromUrl && methods) {\r\n      setMethod(methods.find(m => m.name === nameFromUrl))\r\n    }\r\n  }, [methods, nameFromUrl, setMethod])\r\n\r\n  if (!methods) {\r\n    return <div>Loading...</div>\r\n  }\r\n\r\n  return <div className='methodButtons'>\r\n    <div>\r\n      <h1 style={{ textAlign: 'center' }}>JCQC Reporting Application</h1>\r\n      {error && <span style={{ color: 'red' }}>Error: {error}</span>}\r\n      <hr style={{ width: '36rem' }} />\r\n    </div>\r\n    <div style={{ padding: '15px 2px' }}>\r\n      {methods.map(m => {\r\n        return <span key={m.name}><Link to={`/${m.name}`} className='methodButton' onClick={() => setMethod(m)}>{m.name}</Link>{' '}</span>\r\n      })\r\n      }\r\n\r\n      <Link to='/' className='methodButton' onClick={() => setMethod()}>Clear</Link>\r\n\r\n      {method && (<div>\r\n        <FileSelector setError={setError} method={method} setData={setData} />\r\n        <Method method={method} />\r\n      </div>)}\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport default MethodSelect","import React from 'react'\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst Blank = ({ data, method, blank, LOQs }) => {\r\n  return (\r\n    <div>\r\n      <br />\r\n      <table className='blankTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Sample Type</th>\r\n            {method.elements.map((e, i) =>\r\n              <th key={e}>\r\n                {e + ' (' + method.units[i] + ')'}\r\n              </th>\r\n            )}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          <tr>\r\n            <td className='firstCol'>{data.id}</td>\r\n            {data.values.map(v =>\r\n              <td key={v}>\r\n                {dataUtils.roundToSigFigs(v, method.sigFigs)}\r\n              </td>\r\n            )}\r\n          </tr>\r\n          <tr>\r\n            <td className='firstCol'>Below LOQ</td>\r\n            {data.values.map((v, i) => {\r\n              const hasLOQ = LOQs[i]\r\n              const passes = v < blank.LOQs[i]\r\n              return <td key={v}\r\n                className={hasLOQ ? passes ? 'samplePass' : 'sampleFail' : 'sampleNeutral'}>\r\n                {hasLOQ ? LOQs[i] : '- - -'}\r\n              </td>\r\n            })\r\n            }\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Blank","import React from 'react'\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst Sample = ({ data, sigFigs, coloured }) => {\r\n\r\n  return (\r\n    <tr className={coloured ? 'colouredRow' : ''}>\r\n      <td className='firstCol'>{data.id}</td>\r\n      {data.values.map((v, i) => {\r\n        return <td key={data.id + data.values[i]}>\r\n          {v > 1000 ? parseFloat(dataUtils.roundToSigFigs(v, sigFigs)) : dataUtils.roundToSigFigs(v, sigFigs)}\r\n        </td>\r\n      })\r\n      }\r\n\r\n    </tr>\r\n  )\r\n}\r\n\r\n\r\nconst Samples = ({ samples, sigFigs }) => {\r\n  return <>\r\n    {samples.map((s, i) => {\r\n      return <Sample key={s.id} data={s} sigFigs={sigFigs} coloured={i % 2} />\r\n    })\r\n    }\r\n  </>\r\n}\r\n\r\n\r\nexport default Samples","import React from 'react'\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst Duplicate = ({ data, method }) => {\r\n  const getLowestLOQs = (methodBlanks) => {\r\n    let lowestLOQs = []\r\n    for (const blankType of methodBlanks) {\r\n      for (let i = 0; i < blankType.LOQs.length; i++) {\r\n        const currentLOQ = blankType.LOQs[i]\r\n        if (currentLOQ && (!lowestLOQs[i] || currentLOQ < lowestLOQs[i])) {\r\n          lowestLOQs[i] = blankType.LOQs[i]\r\n        }\r\n      }\r\n    }\r\n    return lowestLOQs\r\n  }\r\n  const LOQs = getLowestLOQs(method.blanks)\r\n  const sigFigs = method.sigFigs\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <table className='RMTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Sample ID</th>\r\n            {method.elements.map((e, i) =>\r\n              <th key={e}>\r\n                {e + ' (' + method.units[i] + ')'}\r\n              </th>\r\n            )}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          <tr>\r\n            <td className='firstCol'>{data.id}</td>\r\n            {data.values.map(v =>\r\n              <td key={v}>\r\n                {v > 1000 ? parseFloat(dataUtils.roundToSigFigs(v, sigFigs)) : dataUtils.roundToSigFigs(v, sigFigs)}\r\n              </td>\r\n            )}\r\n          </tr>\r\n\r\n          <tr className='thickBottomBorder'>\r\n            <td className='firstCol'>{data.id} DUP</td>\r\n            {data.dupValues.map(v =>\r\n              <td key={v}>\r\n                {v > 1000 ? parseFloat(dataUtils.roundToSigFigs(v, sigFigs)) : dataUtils.roundToSigFigs(v, sigFigs)}\r\n              </td>\r\n            )}\r\n          </tr>\r\n\r\n          <tr>\r\n            <td className='firstCol'>Average</td>\r\n            {data.values.map((v, idx) => {\r\n              const averageValue = (v + data.dupValues[idx]) / 2\r\n              return <td key={v}>\r\n                {v > 1000 ? parseFloat(dataUtils.roundToSigFigs(averageValue, sigFigs)) : dataUtils.roundToSigFigs(averageValue, sigFigs)}\r\n              </td>\r\n            }\r\n            )}\r\n          </tr>\r\n\r\n          <tr>\r\n            <td className='firstCol'>RPD (%)</td>\r\n            {data.values.map((v, i) => {\r\n              const average = ((v + data.dupValues[i]) / 2)\r\n              const RPD = ((Math.abs(v - data.dupValues[i]) / average * 100).toFixed(1))\r\n              const aboveLOQ = v > LOQs[i] && LOQs[i]\r\n              return <td className={aboveLOQ ? RPD < method.duplicateTolerance ? 'samplePass' : 'sampleFail' : 'sampleNeutral'} key={v + i}>{RPD}</td>\r\n            })\r\n            }\r\n          </tr>\r\n        </tbody>\r\n\r\n      </table>\r\n      <br />\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Duplicate","import React from 'react'\r\n\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst Duplicate = ({ data, elements, method }) => {\r\n\r\n  return (\r\n    <div>\r\n      <h1>Calibration Data</h1>\r\n\r\n      <table className='calTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Concentration</th>\r\n            {method.elements.map((e, i) => <th key={e}>{e} ({method.units[i]})</th>)}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n\r\n          {data.map((std, i) => {\r\n            return <tr key={std.id + i}>\r\n              <td className='firstCol'>{std.id}</td>\r\n              {std.values.map((v, i) => {\r\n                return <td key={v + i}>{v < 0.001 && std.name !== 'Hg' ? '0.00' : dataUtils.roundToSigFigs(v, method.sigFigs)}</td>\r\n              }\r\n              )}\r\n            </tr>\r\n          })\r\n          }\r\n\r\n        </tbody>\r\n      </table>\r\n      <br />\r\n\r\n\r\n      <h1>Sample Data</h1>\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Duplicate","import React from 'react'\r\n\r\nconst SampleBlock = (props) => {\r\n  const elements = props.elements\r\n  const units = props.units\r\n\r\n  return (\r\n    <>\r\n      <br />\r\n      <table className='sampleTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Sample ID</th>\r\n            {elements.map((e, i) => <th key={e} >{e + ' (' + units[i] + ')'}</th>)}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.children}\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SampleBlock","import React from 'react'\r\n\r\nconst HeaderInfo = ({ method }) => {\r\n  return <div>\r\n    <h1>Sequence Information - {method.name}</h1>\r\n    <div className='headerItem'>Analyst: _________________________</div>\r\n    <div className='headerItem'>Analysis Date: _________________________</div>\r\n    <div className='headerItem'>Sequence ID: ______________________________________</div>\r\n    <div className='headerItem'>Software Version: MassHunter v4.6</div>\r\n    <div className='headerItem'>Autosampler Info: ESI prepFAST SC4</div>\r\n  </div>\r\n}\r\n\r\nexport default HeaderInfo","import React from 'react'\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst CheckStd = ({ data, checkStd, method }) => {\r\n\r\n  const expectedValues = checkStd.expectedValues\r\n  const tolerance = checkStd.tolerance\r\n  const sigFigs = method.sigFigs\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <table className='RMTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Sample Type</th>\r\n            {method.elements.map((e, i) => <th key={e}>{e} (ppb)</th>)}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          <tr>\r\n            <td className='firstCol'>{data.id}</td>\r\n            {data.values.map((v, i) => {\r\n              if (v < 1) {\r\n                v = v * 1000\r\n              }\r\n              return <td key={v + i}>{dataUtils.roundToSigFigs(v, sigFigs)}</td>\r\n            })\r\n            }\r\n          </tr>\r\n          <tr>\r\n            <td className='firstCol'>Within Range</td>\r\n            {data.values.map((v, i) => {\r\n              if (v < 1) {\r\n                v = v * 1000\r\n              }\r\n              const limitLow = expectedValues[i] - (expectedValues[i] * tolerance)\r\n              const limitHigh = expectedValues[i] + (expectedValues[i] * tolerance)\r\n              const withinRange = (v > limitLow) && (v < limitHigh)\r\n              return <td className={withinRange ? 'samplePass' : 'sampleFail'} key={v + i}> {withinRange ? 'Yes' : 'No'}</td>\r\n            })\r\n            }\r\n          </tr>\r\n        </tbody>\r\n\r\n      </table>\r\n      <br />\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default CheckStd","import React from 'react'\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst ReferenceMaterial = ({ data, material, method }) => {\r\n  const rangesLow = material.rangesLow\r\n  const rangesHigh = material.rangesHigh\r\n\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <table className='RMTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Sample Type</th>\r\n            {method.elements.map((e, i) =>\r\n              <th key={e}>\r\n                {e + ' (' + method.units[i] + ')'}\r\n              </th>\r\n            )}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          <tr>\r\n            <td className='firstCol'>{data.id}</td>\r\n            {data.values.map((v, i) =>\r\n              <td key={v + i}>\r\n                {parseFloat(dataUtils.roundToSigFigs(v, method.sigFigs))}\r\n              </td>\r\n            )}\r\n          </tr>\r\n          <tr>\r\n            <td className='firstCol'>Within Range</td>\r\n            {data.values.map((v, i) => {\r\n              const hasRange = material.rangesHigh[i]\r\n              const withinRange = (v > rangesLow[i] && v < rangesHigh[i])\r\n              return <td\r\n                className={withinRange ? 'samplePass' : hasRange ? 'sampleFail' : 'sampleNeutral'}\r\n                key={v + i}> {withinRange ? 'Yes' : hasRange ? 'No' : '- - -'}\r\n              </td>\r\n            })\r\n            }\r\n          </tr>\r\n        </tbody>\r\n\r\n      </table>\r\n      <br />\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default ReferenceMaterial","import React from 'react'\r\nimport { Helmet } from 'react-helmet'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport Blank from './Blank'\r\nimport Samples from './Sample'\r\nimport Duplicate from './Duplicate'\r\nimport Calibration from './Calibration'\r\nimport SampleBlock from './SampleBlock'\r\nimport HeaderInfo from './HeaderInfo'\r\nimport CheckStd from './CheckStd'\r\nimport ReferenceMaterial from './ReferenceMaterial'\r\n\r\nconst Report = ({ data, method }) => {\r\n\r\n  const sampleIdRegEx = new RegExp('[0-9]{2}-[0-9]{6}-[0-9]{4}')\r\n\r\n  if (!data) {\r\n    return <div style={{ textAlign: 'center' }}>\r\n      Loading data. If your report doesn't load soon,\r\n      &nbsp;<Link to='/'>click here</Link> to restart.\r\n      </div>\r\n  }\r\n\r\n  return (\r\n    <div>\r\n\r\n      <Helmet>\r\n        <meta charSet=\"utf-8\" />\r\n        <title>JCQC Reporting Application</title>\r\n      </Helmet>\r\n\r\n      {method && (method.elements.length !== data[0].values.length) &&\r\n        <div style={{ color: 'red' }}>\r\n          Warning: expected {method.elements.length} element{method.elements.length === 1 ? '' : 's'}, found {data[0].values.length}.\r\n          Possible method mismatch.\r\n        </div>}\r\n\r\n      <HeaderInfo method={method} />\r\n      {data[0].id && data.map((d, idx) => {\r\n\r\n        const sampleBlank = method.blanks.find(b => b.name === d.id)\r\n        const checkStd = method.checkStds.find(c => c.name === d.id)\r\n        const referenceMaterial = method.referenceMaterials.find(r => r.name === d.id)\r\n        // const duplicate = d.id.match(sampleIdRegEx) && d.dupValues\r\n        const duplicate = d.dupValues\r\n        const sample = d.id.match(sampleIdRegEx)\r\n\r\n        if (d.id === 'Cal Blank') {\r\n          const calData = data.slice(idx, idx + method.calStandards.length)\r\n          return <Calibration\r\n            data={calData}\r\n            key={idx}\r\n            method={method}\r\n          />\r\n        }\r\n        else if (sampleBlank) {\r\n          const LOQs = method.blanks.find(b => b.type === sampleBlank.type).LOQs\r\n          return <Blank\r\n            data={d}\r\n            key={idx}\r\n            blank={sampleBlank}\r\n            method={method}\r\n            LOQs={LOQs}\r\n          />\r\n        }\r\n        else if (checkStd) {\r\n          return <CheckStd\r\n            data={d}\r\n            key={idx}\r\n            checkStd={checkStd}\r\n            method={method}\r\n          />\r\n        }\r\n        else if (referenceMaterial) {\r\n          const LOQs = method.blanks.find(b => b.type === referenceMaterial.type)\r\n          if (!duplicate) {\r\n            return <ReferenceMaterial\r\n              data={d}\r\n              key={d.id + idx}\r\n              method={method}\r\n              material={referenceMaterial}\r\n              LOQs={LOQs}\r\n            />\r\n          } else {\r\n            return <div key={d.id + idx}><ReferenceMaterial\r\n              data={d}\r\n              method={method}\r\n              material={referenceMaterial}\r\n              LOQs={LOQs}\r\n            />\r\n              <Duplicate\r\n                data={d}\r\n                method={method}\r\n              />\r\n            </div>\r\n          }\r\n        }\r\n        else if (duplicate) {\r\n          return <Duplicate\r\n            data={d}\r\n            key={d.dupValues.length + idx}\r\n            method={method}\r\n          />\r\n        }\r\n        else if (sample) {\r\n          const prevSampleExists = data[idx - 1]\r\n          const prevSampleIsSample = data[idx - 1].id.match(sampleIdRegEx)\r\n          const prevSampleIsDup = data[idx - 1].dupValues\r\n\r\n          // If this is the first sample of a block of samples,\r\n          // we'll start a new block with headers and such.\r\n          if (prevSampleExists && (!prevSampleIsSample || prevSampleIsDup)) {\r\n\r\n            // start a list of the samples in this block\r\n            let sampleList = [d]\r\n            let stillASample = true\r\n            let j = idx + 1\r\n\r\n            // This loop will stay true until the end of the sample\r\n            // block is reached, or we hit a duplicate\r\n            while (stillASample) {\r\n              const isASample = data[j].id.match(sampleIdRegEx)\r\n              const isADup = data[j].dupValues\r\n              stillASample = isASample && !isADup\r\n              if (stillASample) sampleList.push(data[j])\r\n              ++j\r\n            }\r\n\r\n\r\n            // If it's not the first sample of a new block,\r\n            // we can safely skip it because we will pass\r\n            // all of the samples in the block to this component\r\n            return <div key={d.id + idx}>\r\n              <SampleBlock\r\n                elements={method.elements}\r\n                data={d}\r\n                key={Date.now()}\r\n                units={method.units}>\r\n                <Samples samples={sampleList}\r\n                  key={idx}\r\n                  sigFigs={method.sigFigs}\r\n                />\r\n              </SampleBlock>\r\n            </div>\r\n          }\r\n        }\r\n        return null\r\n      })\r\n      }\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default Report","import React, { useState, useEffect } from 'react'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route, Switch\r\n} from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport Helmet from 'react-helmet'\r\n\r\nimport MethodSelect from './components/MethodSelect'\r\nimport Report from './components/Report/index'\r\nimport Method from './components/Method'\r\n\r\nconst App = () => {\r\n  const [error, setError] = useState(null)\r\n  const [data, setData] = useState()\r\n  const [method, setMethod] = useState()\r\n  const [methods, setMethods] = useState()\r\n\r\n  const baseUrl = '/api'\r\n\r\n  useEffect(() => {\r\n    const allMethods = axios.get(`${baseUrl}/methods`)\r\n    allMethods.then(response => setMethods(response.data))\r\n  }, [])\r\n\r\n  return <div>\r\n    <Helmet>\r\n      <meta charSet=\"utf-8\" />\r\n      <title>Agilent 7900 Reporting Application</title>\r\n    </Helmet>\r\n\r\n    <Router>\r\n      <Switch>\r\n\r\n        <Route path='/method'>\r\n          <Method method={method} />\r\n        </Route>\r\n\r\n        <Route path='/report'>\r\n          <Report method={method} data={data} setError={setError} />\r\n        </Route>\r\n\r\n        <Route path='/:name'>\r\n          <MethodSelect\r\n            error={error}\r\n            method={method}\r\n            methods={methods}\r\n            setMethod={setMethod}\r\n            setError={setError}\r\n            setData={setData} />\r\n        </Route>\r\n\r\n        <Route path='/'>\r\n          <MethodSelect method={method} methods={methods} setMethod={setMethod} error={error} />\r\n        </Route>\r\n\r\n      </Switch>\r\n    </Router>\r\n  </div>\r\n\r\n}\r\nexport default App\r\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport App from './App'\n\nimport './styles.css'\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}