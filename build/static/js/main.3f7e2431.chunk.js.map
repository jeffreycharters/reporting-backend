{"version":3,"sources":["components/MethodButtons.js","utils/dataUtils.js","components/Report/Blank.js","components/Report/Sample.js","components/Report/Duplicate.js","components/Report/Calibration.js","components/Report/SampleHeader.js","components/Report/HeaderInfo.js","components/Report/CheckStd.js","components/Report/ReferenceMaterial.js","components/Report/index.js","components/Method.js","App.js","index.js"],"names":["MethodButtons","methods","setMethod","map","m","key","name","onClick","output","data","dupRegEx","RegExp","firstElementMass","mass","i","elementCount","length","values","units","j","push","concentration","sample_name","match","dupValues","sampleObject","id","number","sigFigs","oom","result","Math","pow","round","toPrecision","Blank","method","blank","className","elements","e","v","dataUtils","hasLOQ","LOQs","passes","Sample","coloured","Duplicate","blanks","idx","average","RPD","abs","toFixed","aboveLOQ","duplicateTolerance","std","SampleHeader","HeaderInfo","CheckStd","checkStd","expectedValues","tolerance","limitLow","limitHigh","withinRange","ReferenceMaterial","material","rangesLow","rangesHigh","parseFloat","hasRange","Report","sampleIdRegEx","Helmet","charSet","d","sampleBlank","find","b","checkStds","c","referenceMaterial","referenceMaterials","r","duplicate","sample","calData","slice","calStandards","Calibration","prevSampleExists","prevSampleIsSample","prevSampleIsDup","Date","now","Method","description","join","style","margin","minWidth","borderCollapse","textAlign","borderTop","u","loq","borderBottom","App","useState","setData","setMethods","useEffect","axios","get","then","response","csvHandler","papaparseOptions","header","dynamicTyping","skipEmptyLines","transformHeader","toLowerCase","replace","Reader","paddingTop","fontWeight","cssClass","label","onFileLoaded","parserOptions","inputStyle","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3f7e2431.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst MethodButtons = ({ methods, setMethod }) => {\r\n  return <div>\r\n    {methods.map(m => {\r\n      return <span key={m.name}><button onClick={() => setMethod(m)}>{m.name}</button>{' '}</span>\r\n    })\r\n    }\r\n  </div>\r\n}\r\n\r\nexport default MethodButtons","\r\nconst parseJsonData = (output) => {\r\n\r\n  const data = []\r\n  const dupRegEx = new RegExp(' (d|dup)', 'i')\r\n\r\n  const firstElementMass = output[0].mass\r\n  let i = 1;\r\n  while (output[i].mass !== firstElementMass) {\r\n    i++;\r\n  }\r\n  const elementCount = i;\r\n\r\n  for (let i = 0; i < output.length; i += elementCount) {\r\n\r\n    let values = []\r\n    let units = []\r\n\r\n    for (let j = 0; j < elementCount; j++) {\r\n      values.push(output[i + j].concentration)\r\n      units.push(output[i + j].units)\r\n    }\r\n\r\n    if (data.length > 1 && output[i].sample_name.match(dupRegEx)) {\r\n      data[data.length - 1].dupValues = values\r\n    } else {\r\n      const sampleObject = {\r\n        id: output[i].sample_name,\r\n        values,\r\n        dupValues: null,\r\n        units\r\n      }\r\n      data.push(sampleObject)\r\n    }\r\n  }\r\n  return data\r\n}\r\n\r\nconst roundToSigFigs = (number, sigFigs) => {\r\n  let oom = 0;\r\n  let result = number;\r\n\r\n  if (number > 10) {\r\n    while (result > 10) {\r\n      result /= 10;\r\n      oom += 1;\r\n    }\r\n  }\r\n  else if (number < 0.0001 && number > 0) {\r\n    return '0.00'\r\n  }\r\n  else if (number < 10) {\r\n    while (result < 1 && result > 0) {\r\n      if (result < 0) {\r\n        result = result * (-1);\r\n      }\r\n      result = result * 10;\r\n      oom += 1;\r\n    }\r\n  }\r\n  if (number > 10) {\r\n    result = number / Math.pow(10, oom);\r\n    result = result * Math.pow(10, sigFigs - 1);\r\n    result = Math.round(result)\r\n    result = result / Math.pow(10, sigFigs - oom - 1)\r\n    result = result.toPrecision(sigFigs)\r\n\r\n  } else if (number < 0) {\r\n    result = number * Math.pow(10, sigFigs + 1);\r\n    result = Math.round(result);\r\n    result = result / Math.pow(10, sigFigs + 1)\r\n    result.toPrecision(sigFigs)\r\n\r\n  } else if (number < 1) {\r\n    result = number * Math.pow(10, oom);\r\n    result = result * Math.pow(10, sigFigs - 1)\r\n    result = Math.round(result)\r\n    result = result / Math.pow(10, sigFigs + oom - 1)\r\n    result = result.toPrecision(sigFigs)\r\n\r\n  }\r\n  else {\r\n    result = (number.toPrecision(sigFigs));\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nexport default { parseJsonData, roundToSigFigs }","import React from 'react'\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst Blank = ({ data, method, blank }) => {\r\n  return (\r\n    <div>\r\n      <br />\r\n      <table className='blankTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Sample Type</th>\r\n            {method.elements.map((e, i) =>\r\n              <th key={e}>\r\n                {e + ' (' + method.units[i] + ')'}\r\n              </th>\r\n            )}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          <tr>\r\n            <td className='firstCol'>{data.id}</td>\r\n            {data.values.map(v =>\r\n              <td key={v}>\r\n                {dataUtils.roundToSigFigs(v, method.sigFigs)}\r\n              </td>\r\n            )}\r\n          </tr>\r\n          <tr>\r\n            <td className='firstCol'>Below LOQ</td>\r\n            {data.values.map((v, i) => {\r\n              const hasLOQ = blank.LOQs[i]\r\n              const passes = v < blank.LOQs[i]\r\n              return <td key={v}\r\n                className={hasLOQ ? passes ? 'samplePass' : 'sampleFail' : 'sampleNeutral'}>\r\n                {hasLOQ ? passes ? 'Pass' : 'Check' : '- - -'}\r\n              </td>\r\n            })\r\n            }\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Blank","import React from 'react'\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst Sample = ({ data, sigFigs, coloured }) => {\r\n\r\n  return (\r\n    <table className='sampleTable'>\r\n      <tbody>\r\n        <tr className={coloured ? 'colouredRow' : ''}>\r\n          <td className='firstCol'>{data.id}</td>\r\n          {data.values.map((v, i) => <td key={data.id + data.values[i]}>{dataUtils.roundToSigFigs(v, sigFigs)}</td>)}\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default Sample","import React from 'react'\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst Duplicate = ({ data, method }) => {\r\n  const LOQs = method.blanks[0].LOQs\r\n  const sigFigs = method.sigFigs\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <table className='RMTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Sample ID</th>\r\n            {method.elements.map((e, i) =>\r\n              <th key={e}>\r\n                {e + ' (' + method.units[i] + ')'}\r\n              </th>\r\n            )}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          <tr>\r\n            <td className='firstCol'>{data.id}</td>\r\n            {data.values.map(v =>\r\n              <td key={v}>\r\n                {dataUtils.roundToSigFigs(v, sigFigs)}\r\n              </td>\r\n            )}\r\n          </tr>\r\n\r\n          <tr className='thickBottomBorder'>\r\n            <td className='firstCol'>{data.id} DUP</td>\r\n            {data.dupValues.map(v =>\r\n              <td key={v}>\r\n                {dataUtils.roundToSigFigs(v, sigFigs)}\r\n              </td>\r\n            )}\r\n          </tr>\r\n\r\n          <tr>\r\n            <td className='firstCol'>Average</td>\r\n            {data.values.map((v, idx) =>\r\n              <td key={v}>\r\n                {dataUtils.roundToSigFigs(((v + data.dupValues[idx]) / 2), sigFigs)}\r\n              </td>)}\r\n          </tr>\r\n\r\n          <tr>\r\n            <td className='firstCol'>RPD (%)</td>\r\n            {data.values.map((v, i) => {\r\n              const average = ((v + data.dupValues[i]) / 2)\r\n              const RPD = ((Math.abs(v - data.dupValues[i]) / average * 100).toFixed(1))\r\n              const aboveLOQ = v > LOQs[i] && LOQs[i]\r\n              return <td className={aboveLOQ ? RPD < method.duplicateTolerance ? 'samplePass' : 'sampleFail' : 'sampleNeutral'} key={v + i}>{RPD}</td>\r\n            })\r\n            }\r\n          </tr>\r\n        </tbody>\r\n\r\n      </table>\r\n      <br />\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Duplicate","import React from 'react'\r\n\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst Duplicate = ({ data, elements, method }) => {\r\n\r\n  return (\r\n    <div>\r\n      <h1>Calibration Data</h1>\r\n\r\n      <table className='calTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Concentration</th>\r\n            {method.elements.map((e, i) => <th key={e}>{e} ({method.units[i]})</th>)}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n\r\n          {data.map((std, i) => {\r\n            return <tr key={std.id + i}>\r\n              <td className='firstCol'>{std.id}</td>\r\n              {std.values.map((v, i) => {\r\n                return <td key={v + i}>{dataUtils.roundToSigFigs(v, method.sigFigs)}</td>\r\n              }\r\n              )}\r\n            </tr>\r\n          })\r\n          }\r\n\r\n        </tbody>\r\n      </table>\r\n      <br />\r\n\r\n\r\n      <h1>Sample Data</h1>\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Duplicate","import React from 'react'\r\n\r\nconst SampleHeader = ({ elements, units }) => {\r\n\r\n  return (\r\n    <>\r\n      <br />\r\n      <table className='sampleTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Sample ID</th>\r\n            {elements.map((e, i) => <th key={e} >{e + ' (' + units[i] + ')'}</th>)}\r\n          </tr>\r\n        </thead>\r\n      </table>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SampleHeader","import React from 'react'\r\n\r\nconst HeaderInfo = ({ method }) => {\r\n  return <div>\r\n    <h1>Sequence Information - {method.name}</h1>\r\n    <div className='headerItem'>Analyst: _________________________</div>\r\n    <div className='headerItem'>Analysis Date: _________________________</div>\r\n    <div className='headerItem'>Sequence ID: ______________________________________</div>\r\n    <div className='headerItem'>Software Version: MassHunter v4.6</div>\r\n    <div className='headerItem'>Autosampler Info: ESI prepFAST SC4</div>\r\n  </div>\r\n}\r\n\r\nexport default HeaderInfo","import React from 'react'\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst CheckStd = ({ data, checkStd, method }) => {\r\n\r\n  const expectedValues = checkStd.expectedValues\r\n  const tolerance = checkStd.tolerance\r\n  const sigFigs = method.sigFigs\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <table className='RMTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Sample Type</th>\r\n            {method.elements.map((e, i) => <th key={e}>{e} (ppb)</th>)}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          <tr>\r\n            <td className='firstCol'>{data.id}</td>\r\n            {data.values.map((v, i) => {\r\n              if (v < 1) {\r\n                v = v * 1000\r\n              }\r\n              return <td key={v + i}>{dataUtils.roundToSigFigs(v, sigFigs)}</td>\r\n            })\r\n            }\r\n          </tr>\r\n          <tr>\r\n            <td className='firstCol'>Within Range</td>\r\n            {data.values.map((v, i) => {\r\n              if (v < 1) {\r\n                v = v * 1000\r\n              }\r\n              const limitLow = expectedValues[i] - (expectedValues[i] * tolerance)\r\n              const limitHigh = expectedValues[i] + (expectedValues[i] * tolerance)\r\n              const withinRange = (v > limitLow) && (v < limitHigh)\r\n              return <td className={withinRange ? 'samplePass' : 'sampleFail'} key={v + i}> {withinRange ? 'Yes' : 'No'}</td>\r\n            })\r\n            }\r\n          </tr>\r\n        </tbody>\r\n\r\n      </table>\r\n      <br />\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default CheckStd","import React from 'react'\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst ReferenceMaterial = ({ data, material, method }) => {\r\n  const rangesLow = material.rangesLow\r\n  const rangesHigh = material.rangesHigh\r\n\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <table className='RMTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Sample Type</th>\r\n            {method.elements.map((e, i) =>\r\n              <th key={e}>\r\n                {e + ' (' + method.units[i] + ')'}\r\n              </th>\r\n            )}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          <tr>\r\n            <td className='firstCol'>{data.id}</td>\r\n            {data.values.map((v, i) =>\r\n              <td key={v + i}>\r\n                {parseFloat(dataUtils.roundToSigFigs(v, method.sigFigs))}\r\n              </td>\r\n            )}\r\n          </tr>\r\n          <tr>\r\n            <td className='firstCol'>Within Range</td>\r\n            {data.values.map((v, i) => {\r\n              const hasRange = material.rangesHigh[i]\r\n              const withinRange = (v > rangesLow[i] && v < rangesHigh[i])\r\n              return <td\r\n                className={withinRange ? 'samplePass' : hasRange ? 'sampleFail' : 'sampleNeutral'}\r\n                key={v + i}> {withinRange ? 'Yes' : hasRange ? 'No' : '- - -'}\r\n              </td>\r\n            })\r\n            }\r\n          </tr>\r\n        </tbody>\r\n\r\n      </table>\r\n      <br />\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default ReferenceMaterial","import React from 'react'\r\nimport { Helmet } from 'react-helmet'\r\n\r\nimport Blank from './Blank'\r\nimport Sample from './Sample'\r\nimport Duplicate from './Duplicate'\r\nimport Calibration from './Calibration'\r\nimport SampleHeader from './SampleHeader'\r\nimport HeaderInfo from './HeaderInfo'\r\nimport CheckStd from './CheckStd'\r\nimport ReferenceMaterial from './ReferenceMaterial'\r\n\r\nconst Report = ({ data, method }) => {\r\n\r\n  const sampleIdRegEx = new RegExp('[0-9]{2}-[0-9]{6}-[0-9]{4}')\r\n\r\n  return (\r\n    <div className='container'>\r\n\r\n      <Helmet>\r\n        <meta charSet=\"utf-8\" />\r\n        <title>Agilent 7900 Reporting Application</title>\r\n      </Helmet>\r\n\r\n      <HeaderInfo method={method} />\r\n      {data[0].id && data.map((d, idx) => {\r\n\r\n        const sampleBlank = method.blanks.find(b => b.name === d.id)\r\n        const checkStd = method.checkStds.find(c => c.name === d.id)\r\n        const referenceMaterial = method.referenceMaterials.find(r => r.name === d.id)\r\n        const duplicate = d.id.match(sampleIdRegEx) && d.dupValues\r\n        const sample = d.id.match(sampleIdRegEx)\r\n\r\n        if (d.id === 'Cal Blank') {\r\n          const calData = data.slice(idx, idx + method.calStandards.length)\r\n          return <Calibration\r\n            data={calData}\r\n            key={idx}\r\n            method={method}\r\n          />\r\n        }\r\n        else if (sampleBlank) {\r\n          return <Blank\r\n            data={d}\r\n            key={idx}\r\n            blank={sampleBlank}\r\n            method={method}\r\n          />\r\n        }\r\n        else if (checkStd) {\r\n          return <CheckStd\r\n            data={d}\r\n            key={idx}\r\n            checkStd={checkStd}\r\n            method={method}\r\n          />\r\n        }\r\n        else if (referenceMaterial) {\r\n          return <ReferenceMaterial\r\n            data={d}\r\n            key={idx}\r\n            method={method}\r\n            material={referenceMaterial}\r\n          />\r\n        }\r\n        else if (duplicate) {\r\n          return <Duplicate\r\n            data={d}\r\n            key={idx}\r\n            method={method}\r\n          />\r\n        }\r\n        else if (sample) {\r\n          const prevSampleExists = data[idx - 1]\r\n          const prevSampleIsSample = data[idx - 1].id.match(sampleIdRegEx)\r\n          const prevSampleIsDup = data[idx - 1].dupValues\r\n          if (prevSampleExists && (!prevSampleIsSample || prevSampleIsDup)) {\r\n            return <div key={d.id + idx}>\r\n              <SampleHeader\r\n                elements={method.elements}\r\n                data={d}\r\n                key={Date.now()}\r\n                units={method.units} />\r\n\r\n              <Sample data={d}\r\n                key={idx}\r\n                sigFigs={method.sigFigs}\r\n                coloured={idx % 2 === 1} />\r\n            </div>\r\n          }\r\n          return <Sample\r\n            data={d}\r\n            key={idx}\r\n            sigFigs={method.sigFigs}\r\n            coloured={idx % 2 === 1} />\r\n        }\r\n        return null\r\n      })\r\n      }\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default Report","import React from 'react'\r\n\r\nconst Method = ({ method }) => {\r\n  if (method && method.name) {\r\n    return <div>\r\n      <h2>{method.name}</h2>\r\n      <h3>{method.description}</h3>\r\n\r\n      <h4>Percent RPD for duplicates: {method.duplicateTolerance}<br />\r\n      Number of significant figures on report: {method.sigFigs}</h4>\r\n\r\n      <p>Calibration Standard concentrations: {method.calStandards.join(', ')}</p>\r\n\r\n      <table style={{ margin: 'auto', minWidth: method.elements.length > 5 ? '600px' : '300px', borderCollapse: 'collapse', textAlign: 'center' }}>\r\n\r\n        <thead>\r\n          <tr>\r\n            <th>Elements</th>\r\n            {method.elements.map(e =>\r\n              <th key={e} >{e}</th>\r\n            )}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n\r\n          <tr style={{ borderTop: '1px solid grey' }}>\r\n            <td>Units</td>\r\n            {method.units.map((u, i) =>\r\n              <td key={u + i}>{u}</td>\r\n            )}\r\n          </tr>\r\n\r\n          {method.blanks.map((b, i) => {\r\n            return <tr key={b.name + i} style={i === 0 ? { borderTop: '1px solid grey' } : null}>\r\n              <td>{b.name} LOQs</td>\r\n              {b.LOQs.map((loq, i) => {\r\n                return <td key={i}>{loq}</td>\r\n              })}\r\n            </tr>\r\n          })}\r\n\r\n          {method.checkStds.map((c, i) => {\r\n            return <tr key={c.name + i} style={i === 0 ? { borderTop: '1px solid grey' } : null}>\r\n              <td>{c.name} expected</td>\r\n              {c.expectedValues.map((e, i) => {\r\n                return <td key={i}>{e}</td>\r\n              })}\r\n            </tr>\r\n          })}\r\n        </tbody>\r\n\r\n        {method.referenceMaterials.map((r, i) => {\r\n          return <tbody key={r.name}>\r\n            <tr key={r.name + i} style={{ borderTop: '1px solid grey' }}>\r\n              <td>{r.name} Low</td>\r\n              {r.rangesLow.map((e, i) =>\r\n                <td key={i}>{e}</td>\r\n              )}\r\n            </tr><tr style={{ borderBottom: '1px solid grey' }}>\r\n              <td>{r.name} High</td>\r\n              {r.rangesHigh.map((e, i) =>\r\n                <td key={i}>{e}</td>\r\n              )}\r\n            </tr>\r\n          </tbody>\r\n        })}\r\n\r\n      </table>\r\n    </div>\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n\r\nexport default Method","import React, { useState, useEffect } from 'react'\nimport CSVReader from 'react-csv-reader'\nimport axios from 'axios'\n\nimport MethodButtons from './components/MethodButtons'\nimport Report from './components/Report/index'\nimport Method from './components/Method'\n\nimport dataUtils from './utils/dataUtils'\n\nconst App = () => {\n  const [data, setData] = useState();\n  const [method, setMethod] = useState({});\n  const [methods, setMethods] = useState();\n\n  const baseUrl = '/api'\n\n  useEffect(() => {\n    const allMethods = axios.get(`${baseUrl}/methods`)\n    allMethods.then(response => setMethods(response.data))\n  }, [])\n\n  const csvHandler = (data) => {\n    setData(dataUtils.parseJsonData(data))\n    return <App />\n  }\n\n  const papaparseOptions = {\n    header: true,\n    dynamicTyping: true,\n    skipEmptyLines: true,\n    transformHeader: header => header.toLowerCase().replace(/\\W/g, \"_\")\n  };\n\n\n  const Reader = () => {\n    return (\n      <div style={{ textAlign: 'center', paddingTop: '40px', fontWeight: 'bold' }}>\n        <CSVReader\n          cssClass=\"react-csv-input\"\n          label=\"Select a method using buttons above, then choose your file.\"\n          onFileLoaded={csvHandler}\n          parserOptions={papaparseOptions}\n          inputStyle={{ disabled: 'true' }}\n        />\n      </div>\n    )\n  }\n\n  if (!methods) {\n    return <div>Loading..</div>\n  }\n  else if (!data) {\n    return <div className=\"container\">\n      <MethodButtons methods={methods} setMethod={setMethod} />\n      <Reader />\n      {method.name && <hr />}\n      <Method method={method} />\n    </div>\n  } else {\n    return <Report data={data} method={method} />\n  }\n}\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport App from './App'\n\nimport './styles.css'\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n/*\n//import jsonData from './data/output_good.json'\nimport jsonData from './data/outputBlood.json'\n\nconst parsedData = dataUtils.parseJsonData(jsonData)\nReactDOM.render(<div className='container'><App data={parsedData} /></div>, document.getElementById(\"root\"));\n\n*/"],"sourceRoot":""}