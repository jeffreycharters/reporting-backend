{"version":3,"sources":["utils/csvParse.js","components/Method.js","utils/dataUtils.js","components/FileSelector.js","components/MethodSelect.js","components/Report/Blank.js","components/Report/Sample.js","components/Report/Duplicate.js","components/Report/Calibration.js","components/Report/SampleBlock.js","components/Report/HeaderInfo.js","components/Report/CheckStd.js","components/Report/ReferenceMaterial.js","components/Report/index.js","App.js","index.js"],"names":["module","exports","input","splitFileData","split","fieldNames","trim","i","length","currentFieldName","toLowerCase","join","parsedData","lineItems","currentLineObject","j","push","Method","method","name","className","style","textAlign","paddingTop","description","duplicateTolerance","sigFigs","calStandards","elements","map","e","key","borderTop","units","u","blanks","b","LOQs","loq","checkStds","c","expectedValues","referenceMaterials","r","rangesLow","borderBottom","rangesHigh","output","data","dupRegEx","RegExp","firstElementMass","mass","massesPresent","parseInt","elementCount","sort","a","values","Array","findMassIndex","findIndex","m","Number","concentration","sample_name","match","dupValues","sampleObject","id","number","oom","result","Math","pow","round","toPrecision","FileSelector","setError","setData","history","useHistory","height","padding","type","onChange","event","preventDefault","inputFile","target","files","console","log","reader","FileReader","readAsText","onloadend","jsonData","csvParse","dataUtils","MethodSelect","methods","setMethod","nameFromUrl","useParams","useEffect","find","width","to","onClick","Blank","blank","v","hasLOQ","passes","Sample","coloured","parseFloat","Samples","samples","s","Duplicate","idx","averageValue","average","RPD","abs","toFixed","aboveLOQ","std","SampleBlock","props","children","HeaderInfo","CheckStd","checkStd","tolerance","limitLow","limitHigh","withinRange","ReferenceMaterial","material","hasRange","Report","sampleIdRegEx","Helmet","charSet","d","sampleBlank","referenceMaterial","duplicate","sample","calData","slice","Calibration","prevSampleExists","prevSampleIsSample","prevSampleIsDup","sampleList","stillASample","isASample","isADup","Date","now","App","useState","setMethods","axios","get","then","response","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9f5301b8.chunk.js","sourcesContent":["\r\nconst csvParser = (input) => {\r\n\r\n  const fileData = input;\r\n\r\n  const splitFileData = fileData.split(\"\\n\");\r\n\r\n  const fieldNames = splitFileData[0].trim().split(\",\");\r\n\r\n  // modify field names to not allow spaces -> replace with underscore\r\n  for (let i = 0; i < fieldNames.length; i++) {\r\n    let currentFieldName = fieldNames[i];\r\n    currentFieldName = fieldNames[i].toLowerCase();\r\n    const isMultipleWords = fieldNames[i].split(\" \").length > 1;\r\n    if (isMultipleWords) {\r\n      currentFieldName = currentFieldName.split(\" \").join(\"_\");\r\n    }\r\n    fieldNames[i] = currentFieldName;\r\n  }\r\n\r\n  let parsedData = [];\r\n\r\n  for (let i = 1; i < splitFileData.length; i++) {\r\n    const currentLine = splitFileData[i];\r\n    const lineItems = currentLine.split(\",\");\r\n    let currentLineObject = {};\r\n\r\n    for (let j = 0; j < lineItems.length; j++) {\r\n      currentLineObject[fieldNames[j]] = lineItems[j];\r\n    }\r\n\r\n    if (currentLineObject[fieldNames[0]].length > 0) {\r\n      parsedData.push(currentLineObject);\r\n    }\r\n\r\n  }\r\n\r\n  return parsedData;\r\n\r\n}\r\n\r\nmodule.exports = csvParser;","import React from 'react'\r\n\r\nconst Method = ({ method }) => {\r\n  if (method && method.name) {\r\n    return <div className='centeredContainerParent'>\r\n      <div className='centeredContainerChild' style={{ textAlign: 'left', paddingTop: '15px' }}>\r\n        <h2>{method.name}</h2>\r\n        <h3>{method.description}</h3>\r\n\r\n        <h4>Percent RPD for duplicates: {method.duplicateTolerance}<br />\r\n      Number of significant figures on report: {method.sigFigs}</h4>\r\n\r\n        <p>Calibration Standard concentrations: {method.calStandards.join(', ')}</p>\r\n\r\n        <table className='methodTable stripedTable'>\r\n\r\n          <thead>\r\n            <tr>\r\n              <th className='firstCol'>Elements</th>\r\n              {method.elements.map(e =>\r\n                <th key={e} >{e}</th>\r\n              )}\r\n            </tr>\r\n          </thead>\r\n\r\n          <tbody>\r\n\r\n            <tr style={{ borderTop: '1px solid grey' }}>\r\n              <td className='firstCol'>Units</td>\r\n              {method.units.map((u, i) =>\r\n                <td key={u + i}>{u}</td>\r\n              )}\r\n            </tr>\r\n\r\n            {method.blanks.map((b, i) => {\r\n              return <tr key={b.name + i} style={i === 0 ? { borderTop: '1px solid grey' } : null}>\r\n                <td className='firstCol'>{b.name} LOQs</td>\r\n                {b.LOQs.map((loq, i) => {\r\n                  return <td key={i}>{loq || '- -'}</td>\r\n                })}\r\n              </tr>\r\n            })}\r\n\r\n            {method.checkStds.map((c, i) => {\r\n              return <tr key={c.name + i} style={i === 0 ? { borderTop: '1px solid grey' } : null}>\r\n                <td className='firstCol'>{c.name}</td>\r\n                {c.expectedValues.map((e, i) => {\r\n                  return <td key={i}>{e}</td>\r\n                })}\r\n              </tr>\r\n            })}\r\n\r\n            {method.referenceMaterials.map((r, i) => {\r\n              return <><tr key={r.name + i} style={{ borderTop: '1px solid grey' }}>\r\n                <td className='firstCol'>{r.name} Low</td>\r\n                {r.rangesLow.map((e, i) =>\r\n                  <td key={i}>{e || '- -'}</td>\r\n                )}\r\n              </tr><tr style={{ borderBottom: '1px solid grey' }}>\r\n                  <td className='firstCol'>{r.name} High</td>\r\n                  {r.rangesHigh.map((e, i) =>\r\n                    <td key={i}>{e || '- -'}</td>\r\n                  )}\r\n                </tr>\r\n              </>\r\n            })}\r\n\r\n          </tbody>\r\n\r\n        </table>\r\n      </div>\r\n    </div>\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n\r\nexport default Method","\r\nconst parseJsonData = (output) => {\r\n\r\n  const data = []\r\n  const dupRegEx = new RegExp(' (d|dup)', 'i')\r\n\r\n  const firstElementMass = output[0].mass\r\n  let i = 1;\r\n  let massesPresent = [parseInt(output[0].mass)]\r\n  while (output[i].mass !== firstElementMass) {\r\n    massesPresent.push(parseInt(output[i].mass))\r\n    i++;\r\n  }\r\n  const elementCount = i;\r\n  massesPresent.sort((a, b) => a - b)\r\n\r\n  for (let i = 0; i < output.length; i += elementCount) {\r\n\r\n    let values = new Array(elementCount)\r\n    let units = []\r\n\r\n    for (let j = 0; j < elementCount; j++) {\r\n      const findMassIndex = massesPresent.findIndex(m => m === parseInt(output[i + j].mass))\r\n      values[findMassIndex] = Number(output[i + j].concentration)\r\n      units.push(output[i + j].units)\r\n    }\r\n\r\n    if (data.length > 1 && output[i].sample_name.match(dupRegEx)) {\r\n      data[data.length - 1].dupValues = values\r\n    } else {\r\n      const sampleObject = {\r\n        id: output[i].sample_name,\r\n        values,\r\n        dupValues: null,\r\n        units\r\n      }\r\n      data.push(sampleObject)\r\n    }\r\n  }\r\n  return data\r\n}\r\n\r\nconst roundToSigFigs = (number, sigFigs) => {\r\n  let oom = 0;\r\n  let result = Number(number);\r\n\r\n  if (number > 10) {\r\n    while (result > 10) {\r\n      result /= 10;\r\n      oom += 1;\r\n    }\r\n  }\r\n  else if (number < 0.0001 && number > 0) {\r\n    return '0.00'\r\n  }\r\n  else if (number < 10) {\r\n    while (result < 1 && result > 0) {\r\n      if (result < 0) {\r\n        result = result * (-1);\r\n      }\r\n      result = result * 10;\r\n      oom += 1;\r\n    }\r\n  }\r\n  if (number > 10) {\r\n    result = number / Math.pow(10, oom);\r\n    result = result * Math.pow(10, sigFigs - 1);\r\n    result = Math.round(result)\r\n    result = result / Math.pow(10, sigFigs - oom - 1)\r\n    result = result.toPrecision(sigFigs)\r\n\r\n  } else if (number < 0) {\r\n    result = number * Math.pow(10, sigFigs + 1);\r\n    result = Math.round(result);\r\n    result = result / Math.pow(10, sigFigs + 1)\r\n    result.toPrecision(sigFigs)\r\n\r\n  } else if (number < 1) {\r\n    result = number * Math.pow(10, oom);\r\n    result = result * Math.pow(10, sigFigs - 1)\r\n    result = Math.round(result)\r\n    result = result / Math.pow(10, sigFigs + oom - 1)\r\n    result = result.toPrecision(sigFigs)\r\n\r\n  }\r\n  else {\r\n    result = (number.toPrecision(sigFigs));\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nexport default { parseJsonData, roundToSigFigs }","import React from 'react'\r\n\r\nimport dataUtils from '../utils/dataUtils'\r\nimport csvParse from '../utils/csvParse'\r\n\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst FileSelector = ({ setError, setData, method }) => {\r\n  const history = useHistory()\r\n  const fileHandler = (event) => {\r\n    event.preventDefault()\r\n    const inputFile = event.target.files[0]\r\n    if (inputFile.type !== \"text/plain\") {\r\n      console.log(\"wrong file type\")\r\n      setError(\"Please use a text file\")\r\n      return\r\n    }\r\n    history.push('/report')\r\n\r\n    const reader = new FileReader()\r\n    reader.readAsText(inputFile)\r\n    reader.onloadend = () => {\r\n      const jsonData = csvParse(reader.result)\r\n      const parsedData = dataUtils.parseJsonData(jsonData)\r\n      setData(parsedData)\r\n    }\r\n  }\r\n  return (\r\n    <div className='centeredContainerParent' style={{ height: '60px', padding: '25px' }}>\r\n      <div className='centeredContainerChild'>\r\n        {method.name && <input type=\"file\" id=\"inputFile\" name=\"inputFile\" onChange={fileHandler} />}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FileSelector","import React, { useEffect } from 'react'\r\nimport { Link, useParams } from 'react-router-dom'\r\n\r\nimport Method from '../components/Method'\r\nimport FileSelector from './FileSelector'\r\n\r\nconst MethodSelect = ({ method, methods, setData, setError, setMethod }) => {\r\n\r\n  const nameFromUrl = useParams().name\r\n  useEffect(() => {\r\n    if (nameFromUrl && methods) {\r\n      setMethod(methods.find(m => m.name === nameFromUrl))\r\n    }\r\n  }, [methods, nameFromUrl, setMethod])\r\n\r\n  if (!methods) {\r\n    return <div>Loading...</div>\r\n  }\r\n\r\n  return <div className='methodButtons'>\r\n    <div>\r\n      <h1 style={{ textAlign: 'center' }}>JCQC Reporting Application</h1>\r\n      <hr style={{ width: '36rem' }} />\r\n    </div>\r\n    <div style={{ padding: '15px 2px' }}>\r\n      {methods.map(m => {\r\n        return <span key={m.name}><Link to={`/${m.name}`} className='methodButton' onClick={() => setMethod(m)}>{m.name}</Link>{' '}</span>\r\n      })\r\n      }\r\n\r\n      <Link to='/' className='methodButton' onClick={() => setMethod()}>Clear</Link>\r\n\r\n      {method && <FileSelector setError={setError} method={method} setData={setData} />}\r\n\r\n      {method && <Method method={method} />}\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport default MethodSelect","import React from 'react'\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst Blank = ({ data, method, blank, LOQs }) => {\r\n  return (\r\n    <div>\r\n      <br />\r\n      <table className='blankTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Sample Type</th>\r\n            {method.elements.map((e, i) =>\r\n              <th key={e}>\r\n                {e + ' (' + method.units[i] + ')'}\r\n              </th>\r\n            )}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          <tr>\r\n            <td className='firstCol'>{data.id}</td>\r\n            {data.values.map(v =>\r\n              <td key={v}>\r\n                {dataUtils.roundToSigFigs(v, method.sigFigs)}\r\n              </td>\r\n            )}\r\n          </tr>\r\n          <tr>\r\n            <td className='firstCol'>Below LOQ</td>\r\n            {data.values.map((v, i) => {\r\n              const hasLOQ = LOQs[i]\r\n              const passes = v < blank.LOQs[i]\r\n              return <td key={v}\r\n                className={hasLOQ ? passes ? 'samplePass' : 'sampleFail' : 'sampleNeutral'}>\r\n                {hasLOQ ? LOQs[i] : '- - -'}\r\n              </td>\r\n            })\r\n            }\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Blank","import React from 'react'\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst Sample = ({ data, sigFigs, coloured }) => {\r\n\r\n  return (\r\n    <tr className={coloured ? 'colouredRow' : ''}>\r\n      <td className='firstCol'>{data.id}</td>\r\n      {data.values.map((v, i) => {\r\n        return <td key={data.id + data.values[i]}>\r\n          {v > 1000 ? parseFloat(dataUtils.roundToSigFigs(v, sigFigs)) : dataUtils.roundToSigFigs(v, sigFigs)}\r\n        </td>\r\n      })\r\n      }\r\n\r\n    </tr>\r\n  )\r\n}\r\n\r\n\r\nconst Samples = ({ samples, sigFigs }) => {\r\n  return <>\r\n    {samples.map((s, i) => {\r\n      return <Sample data={s} sigFigs={sigFigs} coloured={i % 2} />\r\n    })\r\n    }\r\n  </>\r\n}\r\n\r\n\r\nexport default Samples","import React from 'react'\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst Duplicate = ({ data, method }) => {\r\n  const LOQs = method.blanks[0].LOQs\r\n  const sigFigs = method.sigFigs\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <table className='RMTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Sample ID</th>\r\n            {method.elements.map((e, i) =>\r\n              <th key={e}>\r\n                {e + ' (' + method.units[i] + ')'}\r\n              </th>\r\n            )}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          <tr>\r\n            <td className='firstCol'>{data.id}</td>\r\n            {data.values.map(v =>\r\n              <td key={v}>\r\n                {v > 1000 ? parseFloat(dataUtils.roundToSigFigs(v, sigFigs)) : dataUtils.roundToSigFigs(v, sigFigs)}\r\n              </td>\r\n            )}\r\n          </tr>\r\n\r\n          <tr className='thickBottomBorder'>\r\n            <td className='firstCol'>{data.id} DUP</td>\r\n            {data.dupValues.map(v =>\r\n              <td key={v}>\r\n                {v > 1000 ? parseFloat(dataUtils.roundToSigFigs(v, sigFigs)) : dataUtils.roundToSigFigs(v, sigFigs)}\r\n              </td>\r\n            )}\r\n          </tr>\r\n\r\n          <tr>\r\n            <td className='firstCol'>Average</td>\r\n            {data.values.map((v, idx) => {\r\n              const averageValue = (v + data.dupValues[idx]) / 2\r\n              return <td key={v}>\r\n                {v > 1000 ? parseFloat(dataUtils.roundToSigFigs(averageValue, sigFigs)) : dataUtils.roundToSigFigs(averageValue, sigFigs)}\r\n              </td>\r\n            }\r\n            )}\r\n          </tr>\r\n\r\n          <tr>\r\n            <td className='firstCol'>RPD (%)</td>\r\n            {data.values.map((v, i) => {\r\n              const average = ((v + data.dupValues[i]) / 2)\r\n              const RPD = ((Math.abs(v - data.dupValues[i]) / average * 100).toFixed(1))\r\n              const aboveLOQ = v > LOQs[i] && LOQs[i]\r\n              return <td className={aboveLOQ ? RPD < method.duplicateTolerance ? 'samplePass' : 'sampleFail' : 'sampleNeutral'} key={v + i}>{RPD}</td>\r\n            })\r\n            }\r\n          </tr>\r\n        </tbody>\r\n\r\n      </table>\r\n      <br />\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Duplicate","import React from 'react'\r\n\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst Duplicate = ({ data, elements, method }) => {\r\n\r\n  return (\r\n    <div>\r\n      <h1>Calibration Data</h1>\r\n\r\n      <table className='calTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Concentration</th>\r\n            {method.elements.map((e, i) => <th key={e}>{e} ({method.units[i]})</th>)}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n\r\n          {data.map((std, i) => {\r\n            return <tr key={std.id + i}>\r\n              <td className='firstCol'>{std.id}</td>\r\n              {std.values.map((v, i) => {\r\n                return <td key={v + i}>{v < 0.001 && std.name !== 'Hg' ? '0.00' : dataUtils.roundToSigFigs(v, method.sigFigs)}</td>\r\n              }\r\n              )}\r\n            </tr>\r\n          })\r\n          }\r\n\r\n        </tbody>\r\n      </table>\r\n      <br />\r\n\r\n\r\n      <h1>Sample Data</h1>\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Duplicate","import React from 'react'\r\n\r\nconst SampleBlock = (props) => {\r\n  const elements = props.elements\r\n  const units = props.units\r\n\r\n  console.log(props.children)\r\n\r\n  return (\r\n    <>\r\n      <br />\r\n      <table className='sampleTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Sample ID</th>\r\n            {elements.map((e, i) => <th key={e} >{e + ' (' + units[i] + ')'}</th>)}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.children}\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SampleBlock","import React from 'react'\r\n\r\nconst HeaderInfo = ({ method }) => {\r\n  return <div>\r\n    <h1>Sequence Information - {method.name}</h1>\r\n    <div className='headerItem'>Analyst: _________________________</div>\r\n    <div className='headerItem'>Analysis Date: _________________________</div>\r\n    <div className='headerItem'>Sequence ID: ______________________________________</div>\r\n    <div className='headerItem'>Software Version: MassHunter v4.6</div>\r\n    <div className='headerItem'>Autosampler Info: ESI prepFAST SC4</div>\r\n  </div>\r\n}\r\n\r\nexport default HeaderInfo","import React from 'react'\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst CheckStd = ({ data, checkStd, method }) => {\r\n\r\n  const expectedValues = checkStd.expectedValues\r\n  const tolerance = checkStd.tolerance\r\n  const sigFigs = method.sigFigs\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <table className='RMTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Sample Type</th>\r\n            {method.elements.map((e, i) => <th key={e}>{e} (ppb)</th>)}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          <tr>\r\n            <td className='firstCol'>{data.id}</td>\r\n            {data.values.map((v, i) => {\r\n              if (v < 1) {\r\n                v = v * 1000\r\n              }\r\n              return <td key={v + i}>{dataUtils.roundToSigFigs(v, sigFigs)}</td>\r\n            })\r\n            }\r\n          </tr>\r\n          <tr>\r\n            <td className='firstCol'>Within Range</td>\r\n            {data.values.map((v, i) => {\r\n              if (v < 1) {\r\n                v = v * 1000\r\n              }\r\n              const limitLow = expectedValues[i] - (expectedValues[i] * tolerance)\r\n              const limitHigh = expectedValues[i] + (expectedValues[i] * tolerance)\r\n              const withinRange = (v > limitLow) && (v < limitHigh)\r\n              return <td className={withinRange ? 'samplePass' : 'sampleFail'} key={v + i}> {withinRange ? 'Yes' : 'No'}</td>\r\n            })\r\n            }\r\n          </tr>\r\n        </tbody>\r\n\r\n      </table>\r\n      <br />\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default CheckStd","import React from 'react'\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst ReferenceMaterial = ({ data, material, method }) => {\r\n  const rangesLow = material.rangesLow\r\n  const rangesHigh = material.rangesHigh\r\n\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <table className='RMTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Sample Type</th>\r\n            {method.elements.map((e, i) =>\r\n              <th key={e}>\r\n                {e + ' (' + method.units[i] + ')'}\r\n              </th>\r\n            )}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          <tr>\r\n            <td className='firstCol'>{data.id}</td>\r\n            {data.values.map((v, i) =>\r\n              <td key={v + i}>\r\n                {parseFloat(dataUtils.roundToSigFigs(v, method.sigFigs))}\r\n              </td>\r\n            )}\r\n          </tr>\r\n          <tr>\r\n            <td className='firstCol'>Within Range</td>\r\n            {data.values.map((v, i) => {\r\n              const hasRange = material.rangesHigh[i]\r\n              const withinRange = (v > rangesLow[i] && v < rangesHigh[i])\r\n              return <td\r\n                className={withinRange ? 'samplePass' : hasRange ? 'sampleFail' : 'sampleNeutral'}\r\n                key={v + i}> {withinRange ? 'Yes' : hasRange ? 'No' : '- - -'}\r\n              </td>\r\n            })\r\n            }\r\n          </tr>\r\n        </tbody>\r\n\r\n      </table>\r\n      <br />\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default ReferenceMaterial","import React, { useEffect } from 'react'\r\nimport { Helmet } from 'react-helmet'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport Blank from './Blank'\r\nimport Samples from './Sample'\r\nimport Duplicate from './Duplicate'\r\nimport Calibration from './Calibration'\r\nimport SampleBlock from './SampleBlock'\r\nimport HeaderInfo from './HeaderInfo'\r\nimport CheckStd from './CheckStd'\r\nimport ReferenceMaterial from './ReferenceMaterial'\r\n\r\nconst Report = ({ data, method }) => {\r\n\r\n  const sampleIdRegEx = new RegExp('[0-9]{2}-[0-9]{6}-[0-9]{4}')\r\n\r\n  if (!data) {\r\n    return <div>\r\n      Loading data. If your report doesn't load soon,\r\n      &nbsp;<Link to='/'>click here</Link> to restart.\r\n      </div>\r\n  }\r\n\r\n  return (\r\n    <div>\r\n\r\n      <Helmet>\r\n        <meta charSet=\"utf-8\" />\r\n        <title>Agilent 7900 Reporting Application</title>\r\n      </Helmet>\r\n\r\n      <HeaderInfo method={method} />\r\n      {data[0].id && data.map((d, idx) => {\r\n\r\n        const sampleBlank = method.blanks.find(b => b.name === d.id)\r\n        const checkStd = method.checkStds.find(c => c.name === d.id)\r\n        const referenceMaterial = method.referenceMaterials.find(r => r.name === d.id)\r\n        const duplicate = d.id.match(sampleIdRegEx) && d.dupValues\r\n        const sample = d.id.match(sampleIdRegEx)\r\n\r\n        if (d.id === 'Cal Blank') {\r\n          const calData = data.slice(idx, idx + method.calStandards.length)\r\n          return <Calibration\r\n            data={calData}\r\n            key={idx}\r\n            method={method}\r\n          />\r\n        }\r\n        else if (sampleBlank) {\r\n          const LOQs = method.blanks.find(b => b.type === sampleBlank.type).LOQs\r\n          return <Blank\r\n            data={d}\r\n            key={idx}\r\n            blank={sampleBlank}\r\n            method={method}\r\n            LOQs={LOQs}\r\n          />\r\n        }\r\n        else if (checkStd) {\r\n          return <CheckStd\r\n            data={d}\r\n            key={idx}\r\n            checkStd={checkStd}\r\n            method={method}\r\n          />\r\n        }\r\n        else if (referenceMaterial) {\r\n          const LOQs = method.blanks.find(b => b.type === referenceMaterial.type)\r\n          return <ReferenceMaterial\r\n            data={d}\r\n            key={idx}\r\n            method={method}\r\n            material={referenceMaterial}\r\n            LOQs={LOQs}\r\n          />\r\n        }\r\n        else if (duplicate) {\r\n          return <Duplicate\r\n            data={d}\r\n            key={idx}\r\n            method={method}\r\n          />\r\n        }\r\n        else if (sample) {\r\n          const prevSampleExists = data[idx - 1]\r\n          const prevSampleIsSample = data[idx - 1].id.match(sampleIdRegEx)\r\n          const prevSampleIsDup = data[idx - 1].dupValues\r\n\r\n          // If this is the first sample of a block of samples,\r\n          // we'll start a new block with headers and such.\r\n          if (prevSampleExists && (!prevSampleIsSample || prevSampleIsDup)) {\r\n\r\n            // start a list of the samples in this block\r\n            let sampleList = [d]\r\n            let stillASample = true\r\n            let j = idx + 1\r\n\r\n            // This loop will stay true until the end of the sample\r\n            // block is reached, or we hit a duplicate\r\n            while (stillASample) {\r\n              const isASample = data[j].id.match(sampleIdRegEx)\r\n              const isADup = data[j].dupValues\r\n              stillASample = isASample && !isADup\r\n              if (stillASample) sampleList.push(data[j])\r\n              ++j\r\n            }\r\n\r\n\r\n            // If it's not the first sample of a new block,\r\n            // we can safely skip it because we will pass\r\n            // all of the samples in the block to this component\r\n            return <div key={d.id + idx}>\r\n              <SampleBlock\r\n                elements={method.elements}\r\n                data={d}\r\n                key={Date.now()}\r\n                units={method.units}>\r\n                <Samples samples={sampleList}\r\n                  key={idx}\r\n                  sigFigs={method.sigFigs}\r\n                />\r\n              </SampleBlock>\r\n            </div>\r\n          }\r\n        }\r\n        return null\r\n      })\r\n      }\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default Report","import React, { useState, useEffect } from 'react'\nimport {\n  BrowserRouter as Router,\n  Route, Switch, Link\n} from 'react-router-dom'\nimport axios from 'axios'\n\nimport MethodSelect from './components/MethodSelect'\nimport Report from './components/Report/index'\nimport Method from './components/Method'\n\nimport FileSelector from './components/FileSelector'\n\nconst App = () => {\n  const [error, setError] = useState(null)\n  const [data, setData] = useState()\n  const [method, setMethod] = useState()\n  const [methods, setMethods] = useState()\n\n  const baseUrl = '/api'\n\n  useEffect(() => {\n    const allMethods = axios.get(`${baseUrl}/methods`)\n    allMethods.then(response => setMethods(response.data))\n  }, [])\n\n  return (\n    <Router>\n      <Switch>\n        <Route path='/report'>\n          <Report method={method} data={data} />\n        </Route>\n        <Route path='/:name'>\n          <MethodSelect\n            method={method}\n            methods={methods}\n            setMethod={setMethod}\n            setError={setError}\n            setData={setData} />\n        </Route>\n        <Route path='/'>\n          <MethodSelect method={method} methods={methods} setMethod={setMethod} />\n        </Route>\n      </Switch>\n    </Router>\n  )\n\n  /* \n  if (!methods) {\n    return <div>Loading..</div>\n  }\n\n  else if (!data) {\n    return <div className=\"container\">\n      {error && <div style={{ textAlign: 'center', height: '2rem', color: 'red' }}>{error}</div>}\n      <MethodButtons methods={methods} setMethod={setMethod} />\n      <FileSelector setError={setError} setData={setData} method={method} />\n      {method.name && <hr />}\n      <Method method={method} />\n    </div>\n\n  } else {\n\n    return <div>\n      <Report data={data} method={method} />\n    </div>\n  } */\n}\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport App from './App'\n\nimport './styles.css'\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n/*\n//import jsonData from './data/output_good.json'\nimport jsonData from './data/outputBlood.json'\n\nconst parsedData = dataUtils.parseJsonData(jsonData)\nReactDOM.render(<div className='container'><App data={parsedData} /></div>, document.getElementById(\"root\"));\n\n*/"],"sourceRoot":""}