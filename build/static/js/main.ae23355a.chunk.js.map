{"version":3,"sources":["utils/dataUtils.js","components/Blank.js","components/Sample.js","components/Duplicate.js","components/Calibration.js","components/SampleHeader.js","components/HeaderInfo.js","components/CheckStd.js","components/ReferenceMaterial.js","App.js","index.js"],"names":["output","data","dupRegEx","RegExp","firstElementMass","mass","i","elementCount","length","values","units","j","push","concentration","id","match","dupValues","sampleObject","number","sigFigs","oom","result","Math","pow","round","toPrecision","Blank","method","blank","className","elements","map","e","key","v","dataUtils","idx","passes","LOQs","Sample","coloured","Duplicate","blanks","average","RPD","abs","toFixed","aboveLOQ","duplicateTolerance","std","SampleHeader","HeaderInfo","name","CheckStd","checkStd","expectedValues","tolerance","limitLow","limitHigh","withinRange","ReferenceMaterial","material","rangesLow","rangesHigh","App","useEffect","document","title","checkStds","Infinity","calStandards","referenceMaterials","sampleIdRegEx","d","sampleBlank","find","b","c","referenceMaterial","r","duplicate","sample","calData","slice","Calibration","prevSampleExists","prevSampleIsSample","prevSampleIsDup","Date","now","parsedData","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ae23355a.chunk.js","sourcesContent":["\r\nconst parseJsonData = (output) => {\r\n\r\n  const data = []\r\n  const dupRegEx = new RegExp(' (d|dup)', 'i')\r\n\r\n  const firstElementMass = output[0].mass\r\n  let i = 1;\r\n  while (output[i].mass !== firstElementMass) {\r\n    i++;\r\n  }\r\n  const elementCount = i;\r\n\r\n  for (let i = 0; i < output.length; i += elementCount) {\r\n\r\n    let values = []\r\n    let units = []\r\n\r\n    for (let j = 0; j < elementCount; j++) {\r\n      values.push(output[i + j].concentration)\r\n      units.push(output[i + j].units)\r\n    }\r\n\r\n    if (data.length > 1 && output[i].id.match(dupRegEx)) {\r\n      data[data.length - 1].dupValues = values\r\n    } else {\r\n      const sampleObject = {\r\n        id: output[i].id,\r\n        values,\r\n        dupValues: null,\r\n        units\r\n      }\r\n      data.push(sampleObject)\r\n    }\r\n  }\r\n  return data\r\n}\r\n\r\nconst roundToSigFigs = (number, sigFigs) => {\r\n  let oom = 0;\r\n  let result = number;\r\n\r\n  if (number > 10) {\r\n    while (result > 10) {\r\n      result /= 10;\r\n      oom += 1;\r\n    }\r\n  }\r\n  else if (number < 0.0001 && number > 0) {\r\n    return '0.00'\r\n  }\r\n  else if (number < 10) {\r\n    while (result < 1 && result > 0) {\r\n      if (result < 0) {\r\n        result = result * (-1);\r\n      }\r\n      result = result * 10;\r\n      oom += 1;\r\n    }\r\n  }\r\n  if (number > 10) {\r\n    result = number / Math.pow(10, oom);\r\n    result = result * Math.pow(10, sigFigs - 1);\r\n    result = Math.round(result)\r\n    result = result / Math.pow(10, sigFigs - oom - 1)\r\n    result = result.toPrecision(sigFigs)\r\n\r\n  } else if (number < 0) {\r\n    result = number * Math.pow(10, sigFigs + 1);\r\n    result = Math.round(result);\r\n    result = result / Math.pow(10, sigFigs + 1)\r\n    result.toPrecision(sigFigs)\r\n\r\n  } else if (number < 1) {\r\n    result = number * Math.pow(10, oom);\r\n    result = result * Math.pow(10, sigFigs - 1)\r\n    result = Math.round(result)\r\n    result = result / Math.pow(10, sigFigs + oom - 1)\r\n    result = result.toPrecision(sigFigs)\r\n\r\n  }\r\n  else {\r\n    result = (number.toPrecision(sigFigs));\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nexport default { parseJsonData, roundToSigFigs }","import React from 'react'\r\nimport dataUtils from '../utils/dataUtils'\r\n\r\nconst Blank = ({ data, method, blank }) => {\r\n  return (\r\n    <div>\r\n      <br />\r\n      <table className='blankTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Sample Type</th>\r\n            {method.elements.map((e, i) => <th key={e}>{e + ' (' + method.units[i] + ')'}</th>)}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          <tr>\r\n            <td className='firstCol'>{data.id}</td>\r\n            {data.values.map(v => <td key={v}>{dataUtils.roundToSigFigs(v, method.sigFigs)}</td>)}\r\n          </tr>\r\n          <tr>\r\n            <td className='firstCol'>&lt; LOQ</td>\r\n            {data.values.map((v, idx) => {\r\n              const passes = v < blank.LOQs[idx]\r\n              return <td key={v} className={passes ? 'samplePass' : 'sampleFail'}>{passes ? 'Pass' : 'Check'}</td>\r\n            })\r\n            }\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Blank","import React from 'react'\r\nimport dataUtils from '../utils/dataUtils'\r\n\r\nconst Sample = ({ data, sigFigs, coloured }) => {\r\n\r\n  return (\r\n    <table className='sampleTable'>\r\n      <tbody>\r\n        <tr className={coloured ? 'colouredRow' : ''}>\r\n          <td className={'firstCol'}>{data.id}</td>\r\n          {data.values.map((v, i) => <td key={data.id + data.values[i]}>{dataUtils.roundToSigFigs(v, sigFigs)}</td>)}\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default Sample","import React from 'react'\r\nimport dataUtils from '../utils/dataUtils'\r\n\r\nconst Duplicate = ({ data, method }) => {\r\n  const LOQs = method.blanks[0].LOQs\r\n  const sigFigs = method.sigFigs\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <table className='RMTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Sample ID</th>\r\n            {method.elements.map((e, i) => <th key={e}>{e + ' (' + data.units[i] + ')'}</th>)}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          <tr>\r\n            <td className='firstCol'>{data.id}</td>\r\n            {data.values.map(v => <td key={v}>{dataUtils.roundToSigFigs(v, sigFigs)}</td>)}\r\n          </tr>\r\n\r\n          <tr className='thickBottomBorder'>\r\n            <td className='firstCol'>{data.id} DUP</td>\r\n            {data.dupValues.map(v => <td key={v}>{dataUtils.roundToSigFigs(v, sigFigs)}</td>)}\r\n          </tr>\r\n\r\n          <tr>\r\n            <td className='firstCol'>Average</td>\r\n            {data.values.map((v, idx) => <td key={v}>{dataUtils.roundToSigFigs(((v + data.dupValues[idx]) / 2), sigFigs)}</td>)}\r\n          </tr>\r\n\r\n          <tr>\r\n            <td className='firstCol'>RPD (%)</td>\r\n            {data.values.map((v, i) => {\r\n              const average = ((v + data.dupValues[i]) / 2)\r\n              const RPD = ((Math.abs(v - data.dupValues[i]) / average * 100).toFixed(1))\r\n              const aboveLOQ = v > LOQs[i]\r\n              return <td className={aboveLOQ ? RPD < method.duplicateTolerance ? 'samplePass' : 'sampleFail' : 'sampleNeutral'} key={v + i}>{RPD}</td>\r\n            })\r\n            }\r\n          </tr>\r\n        </tbody>\r\n\r\n      </table>\r\n      <br />\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Duplicate","import React from 'react'\r\nimport '../styles.css'\r\n\r\nconst Duplicate = ({ data, elements }) => {\r\n\r\n  return (\r\n    <div>\r\n      <h1>Calibration Data</h1>\r\n\r\n      <table className='calTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Concentration</th>\r\n            {elements.map(e => <th key={e}>{e} (ppb)</th>)}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n\r\n          {data.map((std, i) => {\r\n            return <tr key={std.id + i}>\r\n              <td className='firstCol'>{std.id}</td>\r\n              {std.values.map((v, i) => {\r\n                if (std.id === '250 uog3' && v < 0.1) {\r\n                  return <td className={i === 0 ? 'firstCol' : ''} key={v + i}> </td>\r\n                }\r\n                return <td key={v + i}>{v < 0.1 ? (v * 1000).toPrecision(4) : v.toPrecision(4)}</td>\r\n              }\r\n              )}\r\n            </tr>\r\n          })\r\n          }\r\n\r\n        </tbody>\r\n      </table>\r\n      <br />\r\n\r\n\r\n      <h1>Sample Data</h1>\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Duplicate","import React from 'react'\r\n\r\nconst SampleHeader = ({ elements, units }) => {\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <table className='sampleTable'>\r\n        <tbody>\r\n          <tr>\r\n            <th className='firstCol'>Sample ID</th>\r\n            {elements.map((e, i) => <th key={e}>{e + ' (' + units[i] + ')'}</th>)}\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default SampleHeader","import React from 'react'\r\n\r\nconst HeaderInfo = ({ method }) => {\r\n  return <div>\r\n    <h1>Sequence Information - {method.name}</h1>\r\n    <div className='headerItem'>Analyst: _________________________</div>\r\n    <div className='headerItem'>Analysis Date: _________________________</div>\r\n    <div className='headerItem'>Sequence ID: ______________________________________</div>\r\n    <div className='headerItem'>Software Version: MassHunter v4.6</div>\r\n    <div className='headerItem'>Autosampler Info: ESI prepFAST SC4</div>\r\n  </div>\r\n}\r\n\r\nexport default HeaderInfo","import React from 'react'\r\nimport dataUtils from '../utils/dataUtils'\r\n\r\nconst CheckStd = ({ data, checkStd, method }) => {\r\n\r\n  const expectedValues = checkStd.expectedValues\r\n  const tolerance = checkStd.tolerance\r\n  const sigFigs = method.sigFigs\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <table className='RMTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Sample Type</th>\r\n            {method.elements.map((e, i) => <th key={e}>{e} (ppb)</th>)}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          <tr>\r\n            <td className='firstCol'>{data.id}</td>\r\n            {data.values.map((v, i) => {\r\n              if (v < 1) {\r\n                v = v * 1000\r\n              }\r\n              return <td key={v + i}>{dataUtils.roundToSigFigs(v, sigFigs)}</td>\r\n            })\r\n            }\r\n          </tr>\r\n          <tr>\r\n            <td className='firstCol'>Within Range</td>\r\n            {data.values.map((v, i) => {\r\n              if (v < 1) {\r\n                v = v * 1000\r\n              }\r\n              const limitLow = expectedValues[i] - (expectedValues[i] * tolerance)\r\n              const limitHigh = expectedValues[i] + (expectedValues[i] * tolerance)\r\n              const withinRange = (v > limitLow) && (v < limitHigh)\r\n              return <td className={withinRange ? 'samplePass' : 'sampleFail'} key={v + i}> {withinRange ? 'Yes' : 'No'}</td>\r\n            })\r\n            }\r\n          </tr>\r\n        </tbody>\r\n\r\n      </table>\r\n      <br />\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default CheckStd","import React from 'react'\r\nimport dataUtils from '../utils/dataUtils'\r\n\r\nconst ReferenceMaterial = ({ data, material, method }) => {\r\n  const rangesLow = material.rangesLow\r\n  const rangesHigh = material.rangesHigh\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <table className='RMTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Sample Type</th>\r\n            {method.elements.map((e, i) => <th key={e}>{e + ' (' + data.units[i] + ')'}</th>)}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          <tr>\r\n            <td className='firstCol'>{data.id}</td>\r\n            {data.values.map((v, i) => <td key={v + i}>{dataUtils.roundToSigFigs(v, method.sigFigs)}</td>)}\r\n          </tr>\r\n          <tr>\r\n            <td className='firstCol'>Within Range</td>\r\n            {data.values.map((v, i) => {\r\n              const withinRange = (v > rangesLow[i] && v < rangesHigh[i])\r\n              return <td className={withinRange ? 'samplePass' : 'sampleFail'} key={v + i}> {withinRange ? 'Yes' : 'No'}</td>\r\n            })\r\n            }\r\n          </tr>\r\n        </tbody>\r\n\r\n      </table>\r\n      <br />\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default ReferenceMaterial","import React, { useEffect } from 'react'\n\nimport Blank from './components/Blank'\nimport Sample from './components/Sample'\nimport Duplicate from './components/Duplicate'\nimport Calibration from './components/Calibration'\nimport SampleHeader from './components/SampleHeader'\nimport HeaderInfo from './components/HeaderInfo'\nimport CheckStd from './components/CheckStd'\nimport ReferenceMaterial from './components/ReferenceMaterial'\n\nconst App = ({ data }) => {\n\n  useEffect(() => {\n    document.title = 'CHEM-162 Reporting Summary'\n  }, []);\n\n  const method = {\n    name: \"CHEM-162 Minerals in Serum\",\n    elements: [\"Mn\", \"Fe\", \"Co\", \"Cu\", \"Zn\", \"Se\", \"Mo\", \"Pb\"],\n    units: [\"ppb\", \"ppm\", \"ppb\", \"ppm\", \"ppm\", \"ppm\", \"ppb\", \"ppm\"],\n    checkStds: [\n      {\n        name: '5/50 ppb',\n        expectedValues: [5, 50, 5, 50, 50, 5, 5, 5],\n        tolerance: 0.1\n      }\n    ],\n    blanks: [\n      {\n        name: 'Serum Blank',\n        LOQs: [0.9, 0.013, 0.3, 0.0008, 0.0011, 0.007, 1, 0.001]\n      },\n      {\n        name: 'Blood Blank',\n        LOQs: [Infinity, Infinity, Infinity, Infinity, Infinity, 0.029, Infinity, 0.001]\n      }\n    ],\n    duplicateTolerance: 15,\n    calStandards: [5, 50, 5, 50, 50, 5, 5, 5],\n    sigFigs: 3,\n    referenceMaterials: [{\n      name: 'QM-S Q1807',\n      rangesLow: [2.6, 0.7, 3.7, 0.9, 0.9, 0.1, 1.0, -Infinity],\n      rangesHigh: [3.1, 1.0, 4.2, 1.2, 1.2, 0.15, 1.7, Infinity]\n    },\n    {\n      name: 'QM-B Q1720',\n      rangesLow: [-Infinity, -Infinity, -Infinity, -Infinity, -Infinity, 0.15, -Infinity, 0.10],\n      rangesHigh: [Infinity, Infinity, Infinity, Infinity, Infinity, 0.20, Infinity, 0.14]\n    }\n    ]\n  }\n\n  const sampleIdRegEx = new RegExp('[0-9]{2}-[0-9]{6}-[0-9]{4}')\n\n  return (\n    <div>\n      <HeaderInfo method={method} />\n      {data[0].id && data.map((d, idx) => {\n\n        const sampleBlank = method.blanks.find(b => b.name === d.id)\n        const checkStd = method.checkStds.find(c => c.name === d.id)\n        const referenceMaterial = method.referenceMaterials.find(r => r.name === d.id)\n        const duplicate = d.id.match(sampleIdRegEx) && d.dupValues\n        const sample = d.id.match(sampleIdRegEx)\n\n        if (d.id === 'Cal Blank') {\n          const calData = data.slice(idx, idx + method.calStandards.length)\n          return <Calibration\n            data={calData}\n            key={idx}\n            elements={method.elements} />\n        }\n        else if (sampleBlank) {\n          return <Blank\n            data={d}\n            key={idx}\n            blank={sampleBlank}\n            method={method}\n          />\n        }\n        else if (checkStd) {\n          return <CheckStd\n            data={d}\n            key={idx}\n            checkStd={checkStd}\n            method={method}\n          />\n        }\n        else if (referenceMaterial) {\n          return <ReferenceMaterial\n            data={d}\n            key={idx}\n            method={method}\n            material={referenceMaterial}\n          />\n        }\n        else if (duplicate) {\n          return <Duplicate\n            data={d}\n            key={idx}\n            method={method}\n          />\n        }\n        else if (sample) {\n          const prevSampleExists = data[idx - 1]\n          const prevSampleIsSample = data[idx - 1].id.match(sampleIdRegEx)\n          const prevSampleIsDup = data[idx - 1].dupValues\n          if (prevSampleExists && (!prevSampleIsSample || prevSampleIsDup)) {\n            return <div key={d.id + idx}>\n              <SampleHeader\n                elements={method.elements}\n                key={Date.now()}\n                units={d.units} />\n\n              <Sample data={d}\n                key={idx}\n                sigFigs={method.sigFigs}\n                coloured={idx % 2 === 1} />\n            </div>\n          }\n          return <Sample\n            data={d}\n            key={idx}\n            sigFigs={method.sigFigs}\n            coloured={idx % 2 === 1} />\n        }\n        return null\n      })\n      }\n    </div>\n  )\n\n}\n\nexport default App;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport App from './App'\nimport './styles.css'\n\nimport dataUtils from './utils/dataUtils'\n\n/* Uncomment for production - adds CSV part\n\nimport CSVReader from \"react-csv-reader\";\n\nconst handleForce = (data) => {\n  const parsedData = dataUtils.parseJsonData(data)\n  ReactDOM.render(<div className='container'><App data={parsedData} /></div>, document.getElementById(\"root\"));\n}\n\nconst papaparseOptions = {\n  header: true,\n  dynamicTyping: true,\n  skipEmptyLines: true,\n  transformHeader: header => header.toLowerCase().replace(/\\W/g, \"_\")\n};\n\n\nconst reader = (\n  <div className=\"container\" style={{ textAlign: 'center', paddingTop: '40px', fontWeight: 'bold' }}>\n    <CSVReader\n      cssClass=\"react-csv-input\"\n      label=\"Select CHEM-162 LIMS Export of all samples\"\n      onFileLoaded={handleForce}\n      parserOptions={papaparseOptions}\n    />\n    <p>Built by JCQC</p>\n  </div>\n);\n\nReactDOM.render(reader, document.getElementById(\"root\"));\n\n*/\n\n//import jsonData from './data/output_good.json'\nimport jsonData from './data/outputBlood.json'\n\nconst parsedData = dataUtils.parseJsonData(jsonData)\nReactDOM.render(<div className='container'><App data={parsedData} /></div>, document.getElementById(\"root\"));"],"sourceRoot":""}