{"version":3,"sources":["utils/csvParse.js","components/MethodSelect.js","utils/dataUtils.js","components/Report/Blank.js","components/Report/Sample.js","components/Report/Duplicate.js","components/Report/Calibration.js","components/Report/SampleHeader.js","components/Report/HeaderInfo.js","components/Report/CheckStd.js","components/Report/ReferenceMaterial.js","components/Report/index.js","components/Method.js","App.js","index.js"],"names":["module","exports","input","splitFileData","split","fieldNames","trim","i","length","currentFieldName","toLowerCase","join","parsedData","lineItems","currentLineObject","j","push","MethodSelect","methods","setMethod","className","map","m","key","name","onClick","output","data","dupRegEx","RegExp","firstElementMass","mass","massesPresent","parseInt","elementCount","sort","a","b","values","Array","units","findMassIndex","findIndex","Number","concentration","sample_name","match","dupValues","sampleObject","id","number","sigFigs","oom","result","Math","pow","round","toPrecision","Blank","method","blank","LOQs","elements","e","v","dataUtils","hasLOQ","passes","Sample","coloured","parseFloat","Duplicate","blanks","idx","averageValue","average","RPD","abs","toFixed","aboveLOQ","duplicateTolerance","std","SampleHeader","HeaderInfo","CheckStd","checkStd","expectedValues","tolerance","limitLow","limitHigh","withinRange","ReferenceMaterial","material","rangesLow","rangesHigh","hasRange","Report","sampleIdRegEx","Helmet","charSet","d","console","log","sampleBlank","find","checkStds","c","referenceMaterial","referenceMaterials","r","duplicate","sample","calData","slice","calStandards","Calibration","type","prevSampleExists","prevSampleIsSample","prevSampleIsDup","Date","now","Method","description","style","borderTop","u","loq","borderBottom","App","useState","error","setError","setData","setMethods","useEffect","axios","get","then","response","height","padding","onChange","event","preventDefault","inputFile","target","files","reader","FileReader","readAsText","onloadend","jsonData","csvParse","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b0ddd320.chunk.js","sourcesContent":["\r\nconst csvParser = (input) => {\r\n\r\n  const fileData = input;\r\n\r\n  const splitFileData = fileData.split(\"\\n\");\r\n\r\n  const fieldNames = splitFileData[0].trim().split(\",\");\r\n\r\n  // modify field names to not allow spaces -> replace with underscore\r\n  for (let i = 0; i < fieldNames.length; i++) {\r\n    let currentFieldName = fieldNames[i];\r\n    currentFieldName = fieldNames[i].toLowerCase();\r\n    const isMultipleWords = fieldNames[i].split(\" \").length > 1;\r\n    if (isMultipleWords) {\r\n      currentFieldName = currentFieldName.split(\" \").join(\"_\");\r\n    }\r\n    fieldNames[i] = currentFieldName;\r\n  }\r\n\r\n  let parsedData = [];\r\n\r\n  for (let i = 1; i < splitFileData.length; i++) {\r\n    const currentLine = splitFileData[i];\r\n    const lineItems = currentLine.split(\",\");\r\n    let currentLineObject = {};\r\n\r\n    for (let j = 0; j < lineItems.length; j++) {\r\n      currentLineObject[fieldNames[j]] = lineItems[j];\r\n    }\r\n\r\n    if (currentLineObject[fieldNames[0]].length > 0) {\r\n      parsedData.push(currentLineObject);\r\n    }\r\n\r\n  }\r\n\r\n  return parsedData;\r\n\r\n}\r\n\r\nmodule.exports = csvParser;","import React from 'react'\r\n\r\nconst MethodSelect = ({ methods, setMethod }) => {\r\n  return <div className='methodButtons'>\r\n    {methods.map(m => {\r\n      return <span key={m.name}><button className='methodButton' onClick={() => setMethod(m)}>{m.name}</button>{' '}</span>\r\n    })\r\n    }\r\n  </div>\r\n}\r\n\r\nexport default MethodSelect","\r\nconst parseJsonData = (output) => {\r\n\r\n  const data = []\r\n  const dupRegEx = new RegExp(' (d|dup)', 'i')\r\n\r\n  const firstElementMass = output[0].mass\r\n  let i = 1;\r\n  let massesPresent = [parseInt(output[0].mass)]\r\n  while (output[i].mass !== firstElementMass) {\r\n    massesPresent.push(parseInt(output[i].mass))\r\n    i++;\r\n  }\r\n  const elementCount = i;\r\n  massesPresent.sort((a, b) => a - b)\r\n\r\n  for (let i = 0; i < output.length; i += elementCount) {\r\n\r\n    let values = new Array(elementCount)\r\n    let units = []\r\n\r\n    for (let j = 0; j < elementCount; j++) {\r\n      const findMassIndex = massesPresent.findIndex(m => m === parseInt(output[i + j].mass))\r\n      values[findMassIndex] = Number(output[i + j].concentration)\r\n      units.push(output[i + j].units)\r\n    }\r\n\r\n    if (data.length > 1 && output[i].sample_name.match(dupRegEx)) {\r\n      data[data.length - 1].dupValues = values\r\n    } else {\r\n      const sampleObject = {\r\n        id: output[i].sample_name,\r\n        values,\r\n        dupValues: null,\r\n        units\r\n      }\r\n      data.push(sampleObject)\r\n    }\r\n  }\r\n  return data\r\n}\r\n\r\nconst roundToSigFigs = (number, sigFigs) => {\r\n  let oom = 0;\r\n  let result = Number(number);\r\n\r\n  if (number > 10) {\r\n    while (result > 10) {\r\n      result /= 10;\r\n      oom += 1;\r\n    }\r\n  }\r\n  else if (number < 0.0001 && number > 0) {\r\n    return '0.00'\r\n  }\r\n  else if (number < 10) {\r\n    while (result < 1 && result > 0) {\r\n      if (result < 0) {\r\n        result = result * (-1);\r\n      }\r\n      result = result * 10;\r\n      oom += 1;\r\n    }\r\n  }\r\n  if (number > 10) {\r\n    result = number / Math.pow(10, oom);\r\n    result = result * Math.pow(10, sigFigs - 1);\r\n    result = Math.round(result)\r\n    result = result / Math.pow(10, sigFigs - oom - 1)\r\n    result = result.toPrecision(sigFigs)\r\n\r\n  } else if (number < 0) {\r\n    result = number * Math.pow(10, sigFigs + 1);\r\n    result = Math.round(result);\r\n    result = result / Math.pow(10, sigFigs + 1)\r\n    result.toPrecision(sigFigs)\r\n\r\n  } else if (number < 1) {\r\n    result = number * Math.pow(10, oom);\r\n    result = result * Math.pow(10, sigFigs - 1)\r\n    result = Math.round(result)\r\n    result = result / Math.pow(10, sigFigs + oom - 1)\r\n    result = result.toPrecision(sigFigs)\r\n\r\n  }\r\n  else {\r\n    result = (number.toPrecision(sigFigs));\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nexport default { parseJsonData, roundToSigFigs }","import React from 'react'\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst Blank = ({ data, method, blank, LOQs }) => {\r\n  return (\r\n    <div>\r\n      <br />\r\n      <table className='blankTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Sample Type</th>\r\n            {method.elements.map((e, i) =>\r\n              <th key={e}>\r\n                {e + ' (' + method.units[i] + ')'}\r\n              </th>\r\n            )}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          <tr>\r\n            <td className='firstCol'>{data.id}</td>\r\n            {data.values.map(v =>\r\n              <td key={v}>\r\n                {dataUtils.roundToSigFigs(v, method.sigFigs)}\r\n              </td>\r\n            )}\r\n          </tr>\r\n          <tr>\r\n            <td className='firstCol'>Below LOQ</td>\r\n            {data.values.map((v, i) => {\r\n              const hasLOQ = LOQs[i]\r\n              const passes = v < blank.LOQs[i]\r\n              return <td key={v}\r\n                className={hasLOQ ? passes ? 'samplePass' : 'sampleFail' : 'sampleNeutral'}>\r\n                {hasLOQ ? LOQs[i] : '- - -'}\r\n              </td>\r\n            })\r\n            }\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Blank","import React from 'react'\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst Sample = ({ data, sigFigs, coloured }) => {\r\n\r\n  return (\r\n    <table className='sampleTable'>\r\n      <tbody>\r\n        <tr className={coloured ? 'colouredRow' : ''}>\r\n          <td className='firstCol'>{data.id}</td>\r\n          {data.values.map((v, i) => <td key={data.id + data.values[i]}>\r\n            {v > 1000 ? parseFloat(dataUtils.roundToSigFigs(v, sigFigs)) : dataUtils.roundToSigFigs(v, sigFigs)}\r\n          </td>)}\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default Sample","import React from 'react'\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst Duplicate = ({ data, method }) => {\r\n  const LOQs = method.blanks[0].LOQs\r\n  const sigFigs = method.sigFigs\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <table className='RMTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Sample ID</th>\r\n            {method.elements.map((e, i) =>\r\n              <th key={e}>\r\n                {e + ' (' + method.units[i] + ')'}\r\n              </th>\r\n            )}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          <tr>\r\n            <td className='firstCol'>{data.id}</td>\r\n            {data.values.map(v =>\r\n              <td key={v}>\r\n                {v > 1000 ? parseFloat(dataUtils.roundToSigFigs(v, sigFigs)) : dataUtils.roundToSigFigs(v, sigFigs)}\r\n              </td>\r\n            )}\r\n          </tr>\r\n\r\n          <tr className='thickBottomBorder'>\r\n            <td className='firstCol'>{data.id} DUP</td>\r\n            {data.dupValues.map(v =>\r\n              <td key={v}>\r\n                {v > 1000 ? parseFloat(dataUtils.roundToSigFigs(v, sigFigs)) : dataUtils.roundToSigFigs(v, sigFigs)}\r\n              </td>\r\n            )}\r\n          </tr>\r\n\r\n          <tr>\r\n            <td className='firstCol'>Average</td>\r\n            {data.values.map((v, idx) => {\r\n              const averageValue = (v + data.dupValues[idx]) / 2\r\n              return <td key={v}>\r\n                {v > 1000 ? parseFloat(dataUtils.roundToSigFigs(averageValue, sigFigs)) : dataUtils.roundToSigFigs(averageValue, sigFigs)}\r\n              </td>\r\n            }\r\n            )}\r\n          </tr>\r\n\r\n          <tr>\r\n            <td className='firstCol'>RPD (%)</td>\r\n            {data.values.map((v, i) => {\r\n              const average = ((v + data.dupValues[i]) / 2)\r\n              const RPD = ((Math.abs(v - data.dupValues[i]) / average * 100).toFixed(1))\r\n              const aboveLOQ = v > LOQs[i] && LOQs[i]\r\n              return <td className={aboveLOQ ? RPD < method.duplicateTolerance ? 'samplePass' : 'sampleFail' : 'sampleNeutral'} key={v + i}>{RPD}</td>\r\n            })\r\n            }\r\n          </tr>\r\n        </tbody>\r\n\r\n      </table>\r\n      <br />\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Duplicate","import React from 'react'\r\n\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst Duplicate = ({ data, elements, method }) => {\r\n\r\n  return (\r\n    <div>\r\n      <h1>Calibration Data</h1>\r\n\r\n      <table className='calTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Concentration</th>\r\n            {method.elements.map((e, i) => <th key={e}>{e} ({method.units[i]})</th>)}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n\r\n          {data.map((std, i) => {\r\n            return <tr key={std.id + i}>\r\n              <td className='firstCol'>{std.id}</td>\r\n              {std.values.map((v, i) => {\r\n                return <td key={v + i}>{v < 0.001 && std.name !== 'Hg' ? '0.00' : dataUtils.roundToSigFigs(v, method.sigFigs)}</td>\r\n              }\r\n              )}\r\n            </tr>\r\n          })\r\n          }\r\n\r\n        </tbody>\r\n      </table>\r\n      <br />\r\n\r\n\r\n      <h1>Sample Data</h1>\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Duplicate","import React from 'react'\r\n\r\nconst SampleHeader = ({ elements, units }) => {\r\n\r\n  return (\r\n    <>\r\n      <br />\r\n      <table className='sampleTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Sample ID</th>\r\n            {elements.map((e, i) => <th key={e} >{e + ' (' + units[i] + ')'}</th>)}\r\n          </tr>\r\n        </thead>\r\n      </table>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SampleHeader","import React from 'react'\r\n\r\nconst HeaderInfo = ({ method }) => {\r\n  return <div>\r\n    <h1>Sequence Information - {method.name}</h1>\r\n    <div className='headerItem'>Analyst: _________________________</div>\r\n    <div className='headerItem'>Analysis Date: _________________________</div>\r\n    <div className='headerItem'>Sequence ID: ______________________________________</div>\r\n    <div className='headerItem'>Software Version: MassHunter v4.6</div>\r\n    <div className='headerItem'>Autosampler Info: ESI prepFAST SC4</div>\r\n  </div>\r\n}\r\n\r\nexport default HeaderInfo","import React from 'react'\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst CheckStd = ({ data, checkStd, method }) => {\r\n\r\n  const expectedValues = checkStd.expectedValues\r\n  const tolerance = checkStd.tolerance\r\n  const sigFigs = method.sigFigs\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <table className='RMTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Sample Type</th>\r\n            {method.elements.map((e, i) => <th key={e}>{e} (ppb)</th>)}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          <tr>\r\n            <td className='firstCol'>{data.id}</td>\r\n            {data.values.map((v, i) => {\r\n              if (v < 1) {\r\n                v = v * 1000\r\n              }\r\n              return <td key={v + i}>{dataUtils.roundToSigFigs(v, sigFigs)}</td>\r\n            })\r\n            }\r\n          </tr>\r\n          <tr>\r\n            <td className='firstCol'>Within Range</td>\r\n            {data.values.map((v, i) => {\r\n              if (v < 1) {\r\n                v = v * 1000\r\n              }\r\n              const limitLow = expectedValues[i] - (expectedValues[i] * tolerance)\r\n              const limitHigh = expectedValues[i] + (expectedValues[i] * tolerance)\r\n              const withinRange = (v > limitLow) && (v < limitHigh)\r\n              return <td className={withinRange ? 'samplePass' : 'sampleFail'} key={v + i}> {withinRange ? 'Yes' : 'No'}</td>\r\n            })\r\n            }\r\n          </tr>\r\n        </tbody>\r\n\r\n      </table>\r\n      <br />\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default CheckStd","import React from 'react'\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst ReferenceMaterial = ({ data, material, method }) => {\r\n  const rangesLow = material.rangesLow\r\n  const rangesHigh = material.rangesHigh\r\n\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <table className='RMTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Sample Type</th>\r\n            {method.elements.map((e, i) =>\r\n              <th key={e}>\r\n                {e + ' (' + method.units[i] + ')'}\r\n              </th>\r\n            )}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          <tr>\r\n            <td className='firstCol'>{data.id}</td>\r\n            {data.values.map((v, i) =>\r\n              <td key={v + i}>\r\n                {parseFloat(dataUtils.roundToSigFigs(v, method.sigFigs))}\r\n              </td>\r\n            )}\r\n          </tr>\r\n          <tr>\r\n            <td className='firstCol'>Within Range</td>\r\n            {data.values.map((v, i) => {\r\n              const hasRange = material.rangesHigh[i]\r\n              const withinRange = (v > rangesLow[i] && v < rangesHigh[i])\r\n              return <td\r\n                className={withinRange ? 'samplePass' : hasRange ? 'sampleFail' : 'sampleNeutral'}\r\n                key={v + i}> {withinRange ? 'Yes' : hasRange ? 'No' : '- - -'}\r\n              </td>\r\n            })\r\n            }\r\n          </tr>\r\n        </tbody>\r\n\r\n      </table>\r\n      <br />\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default ReferenceMaterial","import React from 'react'\r\nimport { Helmet } from 'react-helmet'\r\n\r\nimport Blank from './Blank'\r\nimport Sample from './Sample'\r\nimport Duplicate from './Duplicate'\r\nimport Calibration from './Calibration'\r\nimport SampleHeader from './SampleHeader'\r\nimport HeaderInfo from './HeaderInfo'\r\nimport CheckStd from './CheckStd'\r\nimport ReferenceMaterial from './ReferenceMaterial'\r\n\r\nconst Report = ({ data, method }) => {\r\n\r\n  const sampleIdRegEx = new RegExp('[0-9]{2}-[0-9]{6}-[0-9]{4}')\r\n\r\n  return (\r\n    <div>\r\n\r\n      <Helmet>\r\n        <meta charSet=\"utf-8\" />\r\n        <title>Agilent 7900 Reporting Application</title>\r\n      </Helmet>\r\n\r\n      <HeaderInfo method={method} />\r\n      {data[0].id && data.map((d, idx) => {\r\n\r\n        console.log(d)\r\n\r\n        const sampleBlank = method.blanks.find(b => b.name === d.id)\r\n        const checkStd = method.checkStds.find(c => c.name === d.id)\r\n        const referenceMaterial = method.referenceMaterials.find(r => r.name === d.id)\r\n        const duplicate = d.id.match(sampleIdRegEx) && d.dupValues\r\n        const sample = d.id.match(sampleIdRegEx)\r\n\r\n        if (d.id === 'Cal Blank') {\r\n          const calData = data.slice(idx, idx + method.calStandards.length)\r\n          return <Calibration\r\n            data={calData}\r\n            key={idx}\r\n            method={method}\r\n          />\r\n        }\r\n        else if (sampleBlank) {\r\n          const LOQs = method.blanks.find(b => b.type === sampleBlank.type).LOQs\r\n          return <Blank\r\n            data={d}\r\n            key={idx}\r\n            blank={sampleBlank}\r\n            method={method}\r\n            LOQs={LOQs}\r\n          />\r\n        }\r\n        else if (checkStd) {\r\n          return <CheckStd\r\n            data={d}\r\n            key={idx}\r\n            checkStd={checkStd}\r\n            method={method}\r\n          />\r\n        }\r\n        else if (referenceMaterial) {\r\n          const LOQs = method.blanks.find(b => b.type === referenceMaterial.type)\r\n          return <ReferenceMaterial\r\n            data={d}\r\n            key={idx}\r\n            method={method}\r\n            material={referenceMaterial}\r\n            LOQs={LOQs}\r\n          />\r\n        }\r\n        else if (duplicate) {\r\n          return <Duplicate\r\n            data={d}\r\n            key={idx}\r\n            method={method}\r\n          />\r\n        }\r\n        else if (sample) {\r\n          const prevSampleExists = data[idx - 1]\r\n          const prevSampleIsSample = data[idx - 1].id.match(sampleIdRegEx)\r\n          const prevSampleIsDup = data[idx - 1].dupValues\r\n          if (prevSampleExists && (!prevSampleIsSample || prevSampleIsDup)) {\r\n            return <div key={d.id + idx}>\r\n              <SampleHeader\r\n                elements={method.elements}\r\n                data={d}\r\n                key={Date.now()}\r\n                units={method.units} />\r\n\r\n              <Sample data={d}\r\n                key={idx}\r\n                sigFigs={method.sigFigs}\r\n                coloured={idx % 2 === 1} />\r\n            </div>\r\n          }\r\n          return <Sample\r\n            data={d}\r\n            key={idx}\r\n            sigFigs={method.sigFigs}\r\n            coloured={idx % 2 === 1} />\r\n        }\r\n        return null\r\n      })\r\n      }\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default Report","import React from 'react'\r\n\r\nconst Method = ({ method }) => {\r\n  if (method && method.name) {\r\n    return <div className='centeredContainerParent'>\r\n      <div className='centeredContainerChild'>\r\n        <h2>{method.name}</h2>\r\n        <h3>{method.description}</h3>\r\n\r\n        <h4>Percent RPD for duplicates: {method.duplicateTolerance}<br />\r\n      Number of significant figures on report: {method.sigFigs}</h4>\r\n\r\n        <p>Calibration Standard concentrations: {method.calStandards.join(', ')}</p>\r\n\r\n        <table className='methodTable stripedTable'>\r\n\r\n          <thead>\r\n            <tr>\r\n              <th className='firstCol'>Elements</th>\r\n              {method.elements.map(e =>\r\n                <th key={e} >{e}</th>\r\n              )}\r\n            </tr>\r\n          </thead>\r\n\r\n          <tbody>\r\n\r\n            <tr style={{ borderTop: '1px solid grey' }}>\r\n              <td className='firstCol'>Units</td>\r\n              {method.units.map((u, i) =>\r\n                <td key={u + i}>{u}</td>\r\n              )}\r\n            </tr>\r\n\r\n            {method.blanks.map((b, i) => {\r\n              return <tr key={b.name + i} style={i === 0 ? { borderTop: '1px solid grey' } : null}>\r\n                <td className='firstCol'>{b.name} LOQs</td>\r\n                {b.LOQs.map((loq, i) => {\r\n                  return <td key={i}>{loq || '- -'}</td>\r\n                })}\r\n              </tr>\r\n            })}\r\n\r\n            {method.checkStds.map((c, i) => {\r\n              return <tr key={c.name + i} style={i === 0 ? { borderTop: '1px solid grey' } : null}>\r\n                <td className='firstCol'>{c.name}</td>\r\n                {c.expectedValues.map((e, i) => {\r\n                  return <td key={i}>{e}</td>\r\n                })}\r\n              </tr>\r\n            })}\r\n          </tbody>\r\n\r\n          {method.referenceMaterials.map((r, i) => {\r\n            return <tbody key={r.name}>\r\n              <tr key={r.name + i} style={{ borderTop: '1px solid grey' }}>\r\n                <td className='firstCol'>{r.name} Low</td>\r\n                {r.rangesLow.map((e, i) =>\r\n                  <td key={i}>{e || '- -'}</td>\r\n                )}\r\n              </tr><tr style={{ borderBottom: '1px solid grey' }}>\r\n                <td className='firstCol'>{r.name} High</td>\r\n                {r.rangesHigh.map((e, i) =>\r\n                  <td key={i}>{e || '- -'}</td>\r\n                )}\r\n              </tr>\r\n            </tbody>\r\n          })}\r\n\r\n        </table>\r\n      </div>\r\n    </div>\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n\r\nexport default Method","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nimport MethodButtons from './components/MethodSelect'\nimport Report from './components/Report/index'\nimport Method from './components/Method'\n\nimport dataUtils from './utils/dataUtils'\nimport csvParse from './utils/csvParse'\n\nconst App = () => {\n  const [error, setError] = useState(null)\n  const [data, setData] = useState()\n  const [method, setMethod] = useState({})\n  const [methods, setMethods] = useState()\n\n  const baseUrl = '/api'\n\n  useEffect(() => {\n    const allMethods = axios.get(`${baseUrl}/methods`)\n    allMethods.then(response => setMethods(response.data))\n  }, [])\n\n  const fileHandler = (event) => {\n    event.preventDefault()\n    const inputFile = event.target.files[0]\n    if (inputFile.type !== \"text/plain\") {\n      console.log(\"wrong file type\")\n      setError(\"wrong file type\")\n      return\n    }\n\n    const reader = new FileReader()\n    reader.readAsText(inputFile)\n    reader.onloadend = () => {\n      const jsonData = csvParse(reader.result)\n      const parsedData = dataUtils.parseJsonData(jsonData)\n      setData(parsedData)\n    }\n  }\n\n  if (!methods) {\n    return <div>Loading..</div>\n  }\n  else if (!data) {\n    return <div className=\"container\">\n      <div>{error}</div>\n      <MethodButtons methods={methods} setMethod={setMethod} />\n      <div className='centeredContainerParent' style={{ height: '60px', padding: '25px' }}>\n        <div className='centeredContainerChild'>\n          {method.name && <input type=\"file\" id=\"inputFile\" name=\"inputFile\" onChange={fileHandler} />}\n        </div>\n      </div>\n      {method.name && <hr />}\n      <Method method={method} />\n    </div>\n  } else {\n    return <Report data={data} method={method} />\n  }\n}\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport App from './App'\n\nimport './styles.css'\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n/*\n//import jsonData from './data/output_good.json'\nimport jsonData from './data/outputBlood.json'\n\nconst parsedData = dataUtils.parseJsonData(jsonData)\nReactDOM.render(<div className='container'><App data={parsedData} /></div>, document.getElementById(\"root\"));\n\n*/"],"sourceRoot":""}