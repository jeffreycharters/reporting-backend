{"version":3,"sources":["utils/csvParse.js","components/Method.js","utils/dataUtils.js","components/FileSelector.js","components/MethodSelect.js","components/Report/Blank.js","components/Report/Sample.js","components/Report/Duplicate.js","components/Report/Calibration.js","components/Report/SampleBlock.js","components/Report/HeaderInfo.js","components/Report/CheckStd.js","components/Report/ReferenceMaterial.js","components/Report/index.js","components/Editing/SingleInput.js","components/Editing/UnitInput.js","components/Editing/MethodObjectForm.js","components/Editing/ElementHeader.js","components/Editing/EditMethodForm.js","App.js","index.js"],"names":["module","exports","input","splitFileData","split","fieldNames","trim","i","length","currentFieldName","toLowerCase","join","parsedData","lineItems","currentLineObject","j","push","Method","method","name","className","style","textAlign","paddingTop","description","duplicateTolerance","sigFigs","calStandards","elements","map","e","key","borderTop","units","u","blanks","b","LOQs","loq","checkStds","c","expectedValues","referenceMaterials","r","Fragment","rangesLow","borderBottom","rangesHigh","output","data","dupRegEx","RegExp","firstElementMass","mass","massesPresent","parseInt","elementCount","sort","a","values","Array","findMassIndex","findIndex","m","Number","concentration","sample_name","match","dupValues","sampleObject","id","number","oom","result","Math","pow","round","toPrecision","FileSelector","setError","setData","history","useHistory","height","padding","type","onChange","event","preventDefault","inputFile","target","files","console","log","reader","FileReader","readAsText","onloadend","jsonData","csvParse","dataUtils","MethodSelect","error","methods","setMethod","nameFromUrl","useParams","useEffect","find","color","width","marginBottom","to","onClick","Blank","blank","v","hasLOQ","passes","Sample","coloured","parseFloat","Samples","samples","s","Duplicate","methodBlanks","lowestLOQs","blankType","currentLOQ","getLowestLOQs","idx","averageValue","average","RPD","abs","toFixed","aboveLOQ","std","SampleBlock","props","children","HeaderInfo","CheckStd","checkStd","tolerance","limitLow","limitHigh","withinRange","ReferenceMaterial","material","hasRange","Report","sampleIdRegEx","Helmet","charSet","d","sampleBlank","referenceMaterial","duplicate","sample","calData","slice","Calibration","prevSampleExists","prevSampleIsSample","prevSampleIsDup","sampleList","stillASample","isASample","isADup","Date","now","SingleInput","element","changeHandler","elementAdder","fontWeight","value","size","autoFocus","unit","useState","setValue","onBlur","NameInput","object","nameChangeHandler","arrayToDisplay","NumberInput","Index","numberChangeHandler","MethodObjectForm","removeTypeHandler","currentValue","ElementHeader","title","verticalAlign","EditMethodForm","methodName","axios","get","then","response","methodChangeHandler","blankArray","checkStdsArray","referenceMaterialsArray","methodElementChangeHandler","updatedMethod","methodUnitChangeHandler","newElementHandler","add","modifyArray","array","toAdd","splice","keys","Object","startingElements","isArray","nestedKeys","nestedKey","thisItem","inputNumberChangeHandler","typeIndex","keyName","finalIndex","inputNameChangeHandler","index","addTypeHandler","newBlank","newCheckStd","newReferenceMaterial","margin","smallInput","border","borderRadius","maxWidth","htmlFor","checkStdTolerance","cellSpacing","fontSize","cursor","UnitInput","blankIndex","colSpan","display","App","setMethods","path","ReactDOM","render","document","getElementById"],"mappings":"wFAyCAA,EAAOC,QAxCW,SAACC,GASjB,IAPA,IAEMC,EAFWD,EAEcE,MAAM,MAE/BC,EAAaF,EAAc,GAAGG,OAAOF,MAAM,KAGxCG,EAAI,EAAGA,EAAIF,EAAWG,OAAQD,IAAK,CAC1C,IAAIE,EAAmBJ,EAAWE,GAClCE,EAAmBJ,EAAWE,GAAGG,cACTL,EAAWE,GAAGH,MAAM,KAAKI,OAAS,IAExDC,EAAmBA,EAAiBL,MAAM,KAAKO,KAAK,MAEtDN,EAAWE,GAAKE,EAKlB,IAFA,IAAIG,EAAa,GAERL,EAAI,EAAGA,EAAIJ,EAAcK,OAAQD,IAAK,CAK7C,IAJA,IACMM,EADcV,EAAcI,GACJH,MAAM,KAChCU,EAAoB,GAEfC,EAAI,EAAGA,EAAIF,EAAUL,OAAQO,IACpCD,EAAkBT,EAAWU,IAAMF,EAAUE,GAG3CD,EAAkBT,EAAW,IAAIG,OAAS,GAC5CI,EAAWI,KAAKF,GAKpB,OAAOF,I,oLCyCMK,EA5EA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OAAIA,GAAUA,EAAOC,KACZ,yBAAKC,UAAU,2BACpB,yBAAKA,UAAU,yBAAyBC,MAAO,CAAEC,UAAW,OAAQC,WAAY,SAC9E,4BAAKL,EAAOC,MACZ,4BAAKD,EAAOM,aAEZ,2DAAiCN,EAAOO,oBACxC,wEAA8CP,EAAOQ,SAErD,mEAAyCR,EAAOS,aAAahB,KAAK,OAElE,2BAAOS,UAAU,4BAEf,+BACE,4BACE,wBAAIA,UAAU,YAAd,YACCF,EAAOU,SAASC,KAAI,SAAAC,GAAC,OACpB,wBAAIC,IAAKD,GAAIA,QAKnB,+BAEE,wBAAIT,MAAO,CAAEW,UAAW,mBACtB,wBAAIZ,UAAU,YAAd,SACCF,EAAOe,MAAMJ,KAAI,SAACK,EAAG3B,GAAJ,OAChB,wBAAIwB,IAAKG,EAAI3B,GAAI2B,OAIpBhB,EAAOiB,OAAON,KAAI,SAACO,EAAG7B,GAAJ,OACjB,wBAAIwB,IAAKK,EAAEjB,KAAOZ,EAAGc,MAAa,IAANd,EAAU,CAAEyB,UAAW,kBAAqB,MACtE,wBAAIZ,UAAU,YAAYgB,EAAEjB,KAA5B,SACCiB,EAAEC,KAAKR,KAAI,SAACS,EAAK/B,GAAN,OACV,wBAAIwB,IAAKxB,GAAI+B,GAAO,cAKzBpB,EAAOqB,UAAUV,KAAI,SAACW,EAAGjC,GAAJ,OACpB,wBAAIwB,IAAKS,EAAErB,KAAOZ,EAAGc,MAAa,IAANd,EAAU,CAAEyB,UAAW,kBAAqB,MACtE,wBAAIZ,UAAU,YAAYoB,EAAErB,MAC3BqB,EAAEC,eAAeZ,KAAI,SAACC,EAAGvB,GAAJ,OACpB,wBAAIwB,IAAKxB,GAAIuB,UAKlBZ,EAAOwB,mBAAmBb,KAAI,SAACc,EAAGpC,GAAJ,OAC7B,kBAAC,IAAMqC,SAAP,CAAgBb,IAAKY,EAAExB,MACrB,wBAAIE,MAAO,CAAEW,UAAW,mBACtB,wBAAIZ,UAAU,YAAYuB,EAAExB,KAA5B,QACCwB,EAAEE,UAAUhB,KAAI,SAACC,EAAGvB,GAAJ,OACf,wBAAIwB,IAAKxB,GAAIuB,GAAK,WAEjB,wBAAIT,MAAO,CAAEyB,aAAc,mBAC9B,wBAAI1B,UAAU,YAAYuB,EAAExB,KAA5B,SACCwB,EAAEI,WAAWlB,KAAI,SAACC,EAAGvB,GAAJ,OAChB,wBAAIwB,IAAKxB,GAAIuB,GAAK,mBAY3B,MCkBI,EA3FO,SAACkB,GAQrB,IANA,IAAMC,EAAO,GACPC,EAAW,IAAIC,OAAO,WAAY,KAElCC,EAAmBJ,EAAO,GAAGK,KAC/B9C,EAAI,EACJ+C,EAAgB,CAACC,SAASP,EAAO,GAAGK,OACjCL,EAAOzC,GAAG8C,OAASD,GACxBE,EAActC,KAAKuC,SAASP,EAAOzC,GAAG8C,OACtC9C,IAEF,IAAMiD,EAAejD,EACrB+C,EAAcG,MAAK,SAACC,EAAGtB,GAAJ,OAAUsB,EAAItB,KAEjC,IAfgC,eAevB7B,GAKP,IAHA,IAAIoD,EAAS,IAAIC,MAAMJ,GACnBvB,EAAQ,GAlBkB,WAoBrBlB,GACP,IAAM8C,EAAgBP,EAAcQ,WAAU,SAAAC,GAAC,OAAIA,IAAMR,SAASP,EAAOzC,EAAIQ,GAAGsC,SAChFM,EAAOE,GAAiBG,OAAOhB,EAAOzC,EAAIQ,GAAGkD,eAC7ChC,EAAMjB,KAAKgC,EAAOzC,EAAIQ,GAAGkB,QAHlBlB,EAAI,EAAGA,EAAIyC,EAAczC,IAAM,EAA/BA,GAMT,GAAIkC,EAAKzC,OAAS,GAAKwC,EAAOzC,GAAG2D,YAAYC,MAAMjB,GACjDD,EAAKA,EAAKzC,OAAS,GAAG4D,UAAYT,MAC7B,CACL,IAAMU,EAAe,CACnBC,GAAItB,EAAOzC,GAAG2D,YACdP,SACAS,UAAW,KACXnC,SAEFgB,EAAKjC,KAAKqD,KApBL9D,EAAI,EAAGA,EAAIyC,EAAOxC,OAAQD,GAAKiD,EAAe,EAA9CjD,GAuBT,OAAO0C,GAqDM,EAlDQ,SAACsB,EAAQ7C,GAC9B,IAAI8C,EAAM,EACNC,EAAST,OAAOO,GAEpB,GAAIA,EAAS,GACX,KAAOE,EAAS,IACdA,GAAU,GACVD,GAAO,MAGN,IAAID,EAAS,MAAUA,EAAS,EACnC,MAAO,OAEJ,GAAIA,EAAS,GAChB,KAAOE,EAAS,GAAKA,EAAS,GACxBA,EAAS,IACXA,IAAoB,GAEtBA,GAAkB,GAClBD,GAAO,EA4BX,OAzBID,EAAS,IACXE,EAASF,EAASG,KAAKC,IAAI,GAAIH,GAC/BC,GAAkBC,KAAKC,IAAI,GAAIjD,EAAU,GACzC+C,EAASC,KAAKE,MAAMH,GAEpBA,GADAA,GAAkBC,KAAKC,IAAI,GAAIjD,EAAU8C,EAAM,IAC/BK,YAAYnD,IAEnB6C,EAAS,GAClBE,EAASF,EAASG,KAAKC,IAAI,GAAIjD,EAAU,GACzC+C,EAASC,KAAKE,MAAMH,IACpBA,GAAkBC,KAAKC,IAAI,GAAIjD,EAAU,IAClCmD,YAAYnD,IAEV6C,EAAS,GAClBE,EAASF,EAASG,KAAKC,IAAI,GAAIH,GAC/BC,GAAkBC,KAAKC,IAAI,GAAIjD,EAAU,GACzC+C,EAASC,KAAKE,MAAMH,GAEpBA,GADAA,GAAkBC,KAAKC,IAAI,GAAIjD,EAAU8C,EAAM,IAC/BK,YAAYnD,IAI5B+C,EAAUF,EAAOM,YAAYnD,GAGxB+C,G,iBCrDMK,EA7BM,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,QAAS9D,EAAa,EAAbA,OACnC+D,EAAUC,cAmBhB,OACE,yBAAK9D,UAAU,0BAA0BC,MAAO,CAAE8D,OAAQ,OAAQC,QAAS,SACzE,yBAAKhE,UAAU,0BACZF,EAAOC,MAAQ,2BAAOkE,KAAK,OAAOf,GAAG,YAAYnD,KAAK,YAAYmE,SArBrD,SAACC,GACnBA,EAAMC,iBACN,IAAMC,EAAYF,EAAMG,OAAOC,MAAM,GACrC,GAAuB,eAAnBF,EAAUJ,KAGZ,OAFAO,QAAQC,IAAI,wBACZd,EAAS,0BAGXE,EAAQjE,KAAK,WAEb,IAAM8E,EAAS,IAAIC,WACnBD,EAAOE,WAAWP,GAClBK,EAAOG,UAAY,WACjB,IAAMC,EAAWC,IAASL,EAAOrB,QAC3B7D,EAAawF,EAAwBF,GAC3ClB,EAAQpE,UCiBCyF,EAnCM,SAAC,GAA8D,IAA5DC,EAA2D,EAA3DA,MAAOpF,EAAoD,EAApDA,OAAQqF,EAA4C,EAA5CA,QAASvB,EAAmC,EAAnCA,QAASD,EAA0B,EAA1BA,SAAUyB,EAAgB,EAAhBA,UAE3DC,EAAcC,cAAYvF,KAC1B8D,EAAUC,cAOhB,OANAyB,qBAAU,WACJF,GAAeF,GACjBC,EAAUD,EAAQK,MAAK,SAAA7C,GAAC,OAAIA,EAAE5C,OAASsF,QAExC,CAACF,EAASE,EAAaD,IAErBD,EAIE,yBAAKnF,UAAU,iBACpB,6BACE,wBAAIC,MAAO,CAAEC,UAAW,WAAxB,8BACCgF,GAAS,0BAAMjF,MAAO,CAAEwF,MAAO,QAAtB,UAAuCP,GACjD,wBAAIjF,MAAO,CAAEyF,MAAO,QAASC,aAAc,UAC1CR,EAAQ1E,KAAI,SAAAkC,GACX,OAAO,0BAAMhC,IAAKgC,EAAE5C,MAAM,kBAAC,IAAD,CAAM6F,GAAE,WAAMjD,EAAE5C,MAAQC,UAAU,eAAe6F,QAAS,kBAAMT,EAAUzC,KAAKA,EAAE5C,MAAa,QAI1H,kBAAC,IAAD,CAAM6F,GAAG,IAAI5F,UAAU,eAAe6F,QAAS,kBAAMT,MAArD,SACCtF,GAAU,oCAAE,6BAAM,6BAAM,4BAAQ+F,QAAS,kBAAMhC,EAAQjE,KAAR,gBAAsBE,EAAOC,QAASC,UAAU,gBAAvE,QAA4FF,EAAOC,OAE3HD,GAAW,6BACV,kBAAC,EAAD,CAAc6D,SAAUA,EAAU7D,OAAQA,EAAQ8D,QAASA,IAC3D,kBAAC,EAAD,CAAQ9D,OAAQA,OAlBb,4CC6BIgG,EA3CD,SAAC,GAAmC,IAAjCjE,EAAgC,EAAhCA,KAAM/B,EAA0B,EAA1BA,OAAQiG,EAAkB,EAAlBA,MAAO9E,EAAW,EAAXA,KACpC,OACE,6BACE,6BACA,2BAAOjB,UAAU,cACf,+BACE,4BACE,wBAAIA,UAAU,YAAd,eACCF,EAAOU,SAASC,KAAI,SAACC,EAAGvB,GAAJ,OACnB,wBAAIwB,IAAKD,GACNA,EAAI,KAAOZ,EAAOe,MAAM1B,GAAK,UAMtC,+BACE,4BACE,wBAAIa,UAAU,YAAY6B,EAAKqB,IAC9BrB,EAAKU,OAAO9B,KAAI,SAAAuF,GAAC,OAChB,wBAAIrF,IAAKqF,GACNhB,EAAyBgB,EAAGlG,EAAOQ,cAI1C,4BACE,wBAAIN,UAAU,YAAd,aACC6B,EAAKU,OAAO9B,KAAI,SAACuF,EAAG7G,GACnB,IAAM8G,EAAShF,EAAK9B,GACd+G,EAASF,EAAID,EAAM9E,KAAK9B,GAC9B,OAAO,wBAAIwB,IAAKqF,EACdhG,UAAWiG,EAASC,EAAS,aAAe,aAAe,iBAC1DD,EAAShF,EAAK9B,GAAK,iBChC9BgH,EAAS,SAAC,GAAiC,IAA/BtE,EAA8B,EAA9BA,KAAMvB,EAAwB,EAAxBA,QAAS8F,EAAe,EAAfA,SAE/B,OACE,wBAAIpG,UAAWoG,EAAW,cAAgB,IACxC,wBAAIpG,UAAU,YAAY6B,EAAKqB,IAC9BrB,EAAKU,OAAO9B,KAAI,SAACuF,EAAG7G,GACnB,OAAO,wBAAIwB,IAAKkB,EAAKqB,GAAKrB,EAAKU,OAAOpD,IACnC6G,EAAI,IAAOK,WAAWrB,EAAyBgB,EAAG1F,IAAY0E,EAAyBgB,EAAG1F,SAoBtFgG,EAVC,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,QAASjG,EAAc,EAAdA,QAC1B,OAAO,oCACJiG,EAAQ9F,KAAI,SAAC+F,EAAGrH,GACf,OAAO,kBAAC,EAAD,CAAQwB,IAAK6F,EAAEtD,GAAIrB,KAAM2E,EAAGlG,QAASA,EAAS8F,SAAUjH,EAAI,S,QC2D1DsH,EA/EG,SAAC,GAAsB,IAApB5E,EAAmB,EAAnBA,KAAM/B,EAAa,EAAbA,OAanBmB,EAZgB,SAACyF,GACrB,IADsC,EAClCC,EAAa,GADqB,cAEdD,GAFc,IAEtC,2BACE,IADqC,IAA5BE,EAA2B,QAC3BzH,EAAI,EAAGA,EAAIyH,EAAU3F,KAAK7B,OAAQD,IAAK,CAC9C,IAAM0H,EAAaD,EAAU3F,KAAK9B,GAC9B0H,KAAgBF,EAAWxH,IAAM0H,EAAaF,EAAWxH,MAC3DwH,EAAWxH,GAAKyH,EAAU3F,KAAK9B,KANC,8BAUtC,OAAOwH,EAEIG,CAAchH,EAAOiB,QAC5BT,EAAUR,EAAOQ,QAEvB,OACE,6BACE,6BACA,2BAAON,UAAU,WACf,+BACE,4BACE,wBAAIA,UAAU,YAAd,aACCF,EAAOU,SAASC,KAAI,SAACC,EAAGvB,GAAJ,OACnB,wBAAIwB,IAAKD,GACNA,EAAI,KAAOZ,EAAOe,MAAM1B,GAAK,UAMtC,+BACE,4BACE,wBAAIa,UAAU,YAAY6B,EAAKqB,IAC9BrB,EAAKU,OAAO9B,KAAI,SAAAuF,GAAC,OAChB,wBAAIrF,IAAKqF,GACNA,EAAI,IAAOK,WAAWrB,EAAyBgB,EAAG1F,IAAY0E,EAAyBgB,EAAG1F,QAKjG,wBAAIN,UAAU,qBACZ,wBAAIA,UAAU,YAAY6B,EAAKqB,GAA/B,QACCrB,EAAKmB,UAAUvC,KAAI,SAAAuF,GAAC,OACnB,wBAAIrF,IAAKqF,GACNA,EAAI,IAAOK,WAAWrB,EAAyBgB,EAAG1F,IAAY0E,EAAyBgB,EAAG1F,QAKjG,4BACE,wBAAIN,UAAU,YAAd,WACC6B,EAAKU,OAAO9B,KAAI,SAACuF,EAAGe,GACnB,IAAMC,GAAgBhB,EAAInE,EAAKmB,UAAU+D,IAAQ,EACjD,OAAO,wBAAIpG,IAAKqF,GACbA,EAAI,IAAOK,WAAWrB,EAAyBgC,EAAc1G,IAAY0E,EAAyBgC,EAAc1G,QAMvH,4BACE,wBAAIN,UAAU,YAAd,WACC6B,EAAKU,OAAO9B,KAAI,SAACuF,EAAG7G,GACnB,IAAM8H,GAAYjB,EAAInE,EAAKmB,UAAU7D,IAAM,EACrC+H,GAAQ5D,KAAK6D,IAAInB,EAAInE,EAAKmB,UAAU7D,IAAM8H,EAAU,KAAKG,QAAQ,GACjEC,EAAWrB,EAAI/E,EAAK9B,IAAM8B,EAAK9B,GACrC,OAAO,wBAAIa,UAAWqH,EAAWH,EAAMpH,EAAOO,mBAAqB,aAAe,aAAe,gBAAiBM,IAAKqF,EAAI7G,GAAI+H,SAOvI,+BCpCST,EArCG,SAAC,GAAgC,IAA9B5E,EAA6B,EAA7BA,KAAgB/B,GAAa,EAAvBU,SAAuB,EAAbV,QAEnC,OACE,6BACE,gDAEA,2BAAOE,UAAU,YACf,+BACE,4BACE,wBAAIA,UAAU,YAAd,iBACCF,EAAOU,SAASC,KAAI,SAACC,EAAGvB,GAAJ,OAAU,wBAAIwB,IAAKD,GAAIA,EAAb,KAAkBZ,EAAOe,MAAM1B,GAA/B,UAInC,+BAEG0C,EAAKpB,KAAI,SAAC6G,EAAKnI,GACd,OAAO,wBAAIwB,IAAK2G,EAAIpE,GAAK/D,GACvB,wBAAIa,UAAU,YAAYsH,EAAIpE,IAC7BoE,EAAI/E,OAAO9B,KAAI,SAACuF,EAAG7G,GAClB,OAAO,wBAAIwB,IAAKqF,EAAI7G,GAAI6G,EAAI,MAAsB,OAAbsB,EAAIvH,KAAgB,OAASiF,EAAyBgB,EAAGlG,EAAOQ,mBAS/G,6BAGA,6CCZSiH,EAtBK,SAACC,GACnB,IAAMhH,EAAWgH,EAAMhH,SACjBK,EAAQ2G,EAAM3G,MAEpB,OACE,oCACE,6BACA,2BAAOb,UAAU,eACf,+BACE,4BACE,wBAAIA,UAAU,YAAd,aACCQ,EAASC,KAAI,SAACC,EAAGvB,GAAJ,OAAU,wBAAIwB,IAAKD,GAAKA,EAAI,KAAOG,EAAM1B,GAAK,UAGhE,+BACGqI,EAAMC,aCJFC,EAXI,SAAC,GAAgB,IAAd5H,EAAa,EAAbA,OACpB,OAAO,6BACL,sDAA4BA,EAAOC,MACnC,yBAAKC,UAAU,cAAf,sCACA,yBAAKA,UAAU,cAAf,4CACA,yBAAKA,UAAU,cAAf,uDACA,yBAAKA,UAAU,cAAf,qCACA,yBAAKA,UAAU,cAAf,wCC2CW2H,EAjDE,SAAC,GAAgC,IAA9B9F,EAA6B,EAA7BA,KAAM+F,EAAuB,EAAvBA,SAAU9H,EAAa,EAAbA,OAE5BuB,EAAiBuG,EAASvG,eAC1BwG,EAAYD,EAASC,UACrBvH,EAAUR,EAAOQ,QAEvB,OACE,6BACE,6BACA,2BAAON,UAAU,WACf,+BACE,4BACE,wBAAIA,UAAU,YAAd,eACCF,EAAOU,SAASC,KAAI,SAACC,EAAGvB,GAAJ,OAAU,wBAAIwB,IAAKD,GAAIA,EAAb,eAInC,+BACE,4BACE,wBAAIV,UAAU,YAAY6B,EAAKqB,IAC9BrB,EAAKU,OAAO9B,KAAI,SAACuF,EAAG7G,GAInB,OAHI6G,EAAI,IACNA,GAAQ,KAEH,wBAAIrF,IAAKqF,EAAI7G,GAAI6F,EAAyBgB,EAAG1F,QAIxD,4BACE,wBAAIN,UAAU,YAAd,gBACC6B,EAAKU,OAAO9B,KAAI,SAACuF,EAAG7G,GACf6G,EAAI,IACNA,GAAQ,KAEV,IAAM8B,EAAWzG,EAAelC,GAAMkC,EAAelC,GAAK0I,EACpDE,EAAY1G,EAAelC,GAAMkC,EAAelC,GAAK0I,EACrDG,EAAehC,EAAI8B,GAAc9B,EAAI+B,EAC3C,OAAO,wBAAI/H,UAAWgI,EAAc,aAAe,aAAcrH,IAAKqF,EAAI7G,GAAnE,IAAwE6I,EAAc,MAAQ,YAO7G,+BCKSC,EAjDW,SAAC,GAAgC,IAA9BpG,EAA6B,EAA7BA,KAAMqG,EAAuB,EAAvBA,SAAUpI,EAAa,EAAbA,OACrC2B,EAAYyG,EAASzG,UACrBE,EAAauG,EAASvG,WAG5B,OACE,6BACE,6BACA,2BAAO3B,UAAU,WACf,+BACE,4BACE,wBAAIA,UAAU,YAAd,eACCF,EAAOU,SAASC,KAAI,SAACC,EAAGvB,GAAJ,OACnB,wBAAIwB,IAAKD,GACNA,EAAI,KAAOZ,EAAOe,MAAM1B,GAAK,UAMtC,+BACE,4BACE,wBAAIa,UAAU,YAAY6B,EAAKqB,IAC9BrB,EAAKU,OAAO9B,KAAI,SAACuF,EAAG7G,GAAJ,OACf,wBAAIwB,IAAKqF,EAAI7G,GACVkH,WAAWrB,EAAyBgB,EAAGlG,EAAOQ,eAIrD,4BACE,wBAAIN,UAAU,YAAd,gBACC6B,EAAKU,OAAO9B,KAAI,SAACuF,EAAG7G,GACnB,IAAMgJ,EAAWD,EAASvG,WAAWxC,GAC/B6I,EAAehC,EAAIvE,EAAUtC,IAAM6G,EAAIrE,EAAWxC,GACxD,OAAO,wBACLa,UAAWgI,EAAc,aAAeG,EAAW,aAAe,gBAClExH,IAAKqF,EAAI7G,GAFJ,IAES6I,EAAc,MAAQG,EAAW,KAAO,eAQhE,+BC4GSC,EA9IA,SAAC,GAAsB,IAApBvG,EAAmB,EAAnBA,KAAM/B,EAAa,EAAbA,OAEhBuI,EAAgB,IAAItG,OAAO,8BAEjC,OAAKF,EAQH,6BAEE,kBAACyG,EAAA,EAAD,KACE,0BAAMC,QAAQ,UACd,8DAGDzI,GAAWA,EAAOU,SAASpB,SAAWyC,EAAK,GAAGU,OAAOnD,QACpD,yBAAKa,MAAO,CAAEwF,MAAO,QAArB,qBACqB3F,EAAOU,SAASpB,OADrC,WACgF,IAA3BU,EAAOU,SAASpB,OAAe,GAAK,IADzF,WACsGyC,EAAK,GAAGU,OAAOnD,OADrH,+BAKF,kBAAC,EAAD,CAAYU,OAAQA,IACnB+B,EAAK,GAAGqB,IAAMrB,EAAKpB,KAAI,SAAC+H,EAAGzB,GAE1B,IAAM0B,EAAc3I,EAAOiB,OAAOyE,MAAK,SAAAxE,GAAC,OAAIA,EAAEjB,OAASyI,EAAEtF,MACnD0E,EAAW9H,EAAOqB,UAAUqE,MAAK,SAAApE,GAAC,OAAIA,EAAErB,OAASyI,EAAEtF,MACnDwF,EAAoB5I,EAAOwB,mBAAmBkE,MAAK,SAAAjE,GAAC,OAAIA,EAAExB,OAASyI,EAAEtF,MAErEyF,EAAYH,EAAExF,UACd4F,EAASJ,EAAEtF,GAAGH,MAAMsF,GAE1B,GAAa,cAATG,EAAEtF,GAAoB,CACxB,IAAM2F,EAAUhH,EAAKiH,MAAM/B,EAAKA,EAAMjH,EAAOS,aAAanB,QAC1D,OAAO,kBAAC2J,EAAD,CACLlH,KAAMgH,EACNlI,IAAKoG,EACLjH,OAAQA,IAGP,GAAI2I,EAAa,CACpB,IAAMxH,EAAOnB,EAAOiB,OAAOyE,MAAK,SAAAxE,GAAC,OAAIA,EAAEiD,OAASwE,EAAYxE,QAAMhD,KAClE,OAAO,kBAAC,EAAD,CACLY,KAAM2G,EACN7H,IAAKoG,EACLhB,MAAO0C,EACP3I,OAAQA,EACRmB,KAAMA,IAGL,GAAI2G,EACP,OAAO,kBAAC,EAAD,CACL/F,KAAM2G,EACN7H,IAAKoG,EACLa,SAAUA,EACV9H,OAAQA,IAGP,GAAI4I,EAAmB,CAC1B,IAAMzH,EAAOnB,EAAOiB,OAAOyE,MAAK,SAAAxE,GAAC,OAAIA,EAAEiD,OAASyE,EAAkBzE,QAClE,OAAK0E,EASI,yBAAKhI,IAAK6H,EAAEtF,GAAK6D,GAAK,kBAAC,EAAD,CAC3BlF,KAAM2G,EACN1I,OAAQA,EACRoI,SAAUQ,EACVzH,KAAMA,IAEN,kBAAC,EAAD,CACEY,KAAM2G,EACN1I,OAAQA,KAhBL,kBAAC,EAAD,CACL+B,KAAM2G,EACN7H,IAAK6H,EAAEtF,GAAK6D,EACZjH,OAAQA,EACRoI,SAAUQ,EACVzH,KAAMA,IAgBP,GAAI0H,EACP,OAAO,kBAAC,EAAD,CACL9G,KAAM2G,EACN7H,IAAK6H,EAAExF,UAAU5D,OAAS2H,EAC1BjH,OAAQA,IAGP,GAAI8I,EAAQ,CACf,IAAMI,EAAmBnH,EAAKkF,EAAM,GAC9BkC,EAAqBpH,EAAKkF,EAAM,GAAG7D,GAAGH,MAAMsF,GAC5Ca,EAAkBrH,EAAKkF,EAAM,GAAG/D,UAItC,GAAIgG,KAAsBC,GAAsBC,GAAkB,CAShE,IANA,IAAIC,EAAa,CAACX,GACdY,GAAe,EACfzJ,EAAIoH,EAAM,EAIPqC,GAAc,CACnB,IAAMC,EAAYxH,EAAKlC,GAAGuD,GAAGH,MAAMsF,GAC7BiB,EAASzH,EAAKlC,GAAGqD,WACvBoG,EAAeC,IAAcC,IACXH,EAAWvJ,KAAKiC,EAAKlC,MACrCA,EAOJ,OAAO,yBAAKgB,IAAK6H,EAAEtF,GAAK6D,GACtB,kBAAC,EAAD,CACEvG,SAAUV,EAAOU,SACjBqB,KAAM2G,EACN7H,IAAK4I,KAAKC,MACV3I,MAAOf,EAAOe,OACd,kBAAC,EAAD,CAAS0F,QAAS4C,EAChBxI,IAAKoG,EACLzG,QAASR,EAAOQ,aAM1B,OAAO,SAjIJ,yBAAKL,MAAO,CAAEC,UAAW,WAAzB,uDAEC,kBAAC,IAAD,CAAM0F,GAAG,KAAT,cAFD,iB,eCFI6D,EAdK,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,QAAS3C,EAAuC,EAAvCA,IAAK4C,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aAClD,OAAO,8BACL,0BAAM5J,UAAU,aAAa6F,QAAS,kBAAM+D,EAAa7C,GAAK,KAA9D,KACA,2BAAO9C,KAAK,OACVhE,MAAO,CAAE4J,WAAY,QACrB9J,KAAI,mBAAcgH,GAClB+C,MAAOJ,GAAW,IAClBxF,SAAU,SAACxD,GAAD,OAAOiJ,EAAcjJ,EAAGqG,IAClCgD,KAAK,IACLC,WAAS,MCIAP,EAbK,SAAC,GAAkC,IAAhCQ,EAA+B,EAA/BA,KAAMlD,EAAyB,EAAzBA,IAAK4C,EAAoB,EAApBA,cAAoB,EAC1BO,mBAASD,GADiB,mBAC7CH,EAD6C,KACtCK,EADsC,KAEpD,OAAO,8BACL,2BAAOlG,KAAK,OACVlE,KAAI,mBAAcgH,GAClB+C,MAAOA,EACP5F,SAAU,SAACxD,GAAD,OAAOyJ,EAASzJ,EAAE4D,OAAOwF,QACnCM,OAAQ,SAAC1J,GAAD,OAAOiJ,EAAcjJ,EAAGqG,IAChCgD,KAAK,QCRLM,EAAY,SAAC,GAA8D,IAA5DC,EAA2D,EAA3DA,OAAQvD,EAAmD,EAAnDA,IAAKwD,EAA8C,EAA9CA,kBAAmBtG,EAA2B,EAA3BA,KAAMuG,EAAqB,EAArBA,eAAqB,EACpDN,mBAASI,EAAOvK,MADoC,mBACvE+J,EADuE,KAChEK,EADgE,KAE9E,OAAO,4BACe,cAAnBK,EAAiC,KAChC,2BACEvG,KAAK,OACLf,GAAE,UAAKe,EAAL,aAAc8C,GAChB+C,MAAOA,GAAS,IAChB5F,SAAU,SAACC,GAAD,OAAWgG,EAAShG,EAAMG,OAAOwF,QAC3CM,OAAQG,EACRR,KAAK,OAEW,eAAnBS,EAAkC,cAAgB,KAC/B,cAAnBA,EAAiC,aAAe,KAC7B,SAAnBA,EAA4B,OAAS,OAIpCC,EAAc,SAAC,GAAuE,IAArEC,EAAoE,EAApEA,MAAO3D,EAA6D,EAA7DA,IAAKuD,EAAwD,EAAxDA,OAAQK,EAAgD,EAAhDA,oBAAqB1G,EAA2B,EAA3BA,KAAMuG,EAAqB,EAArBA,eAAqB,EAC/DN,mBAASI,GAAU,IAD4C,mBAClFR,EADkF,KAC3EK,EAD2E,KAEzF,OAAO,4BACL,2BACElG,KAAK,OACLf,GAAE,UAAKe,EAAL,aAAcyG,EAAd,aAAwBF,EAAxB,aAA2CzD,GAC7C+C,MAAOA,GAAS,IAChB5F,SAAU,SAACC,GAAD,OAAWgG,EAAShG,EAAMG,OAAOwF,QAC3CM,OAAQO,EACRZ,KAAK,QA0CIa,EArCU,SAAC,GAMC,IANC3G,EAMF,EANEA,KAC1BqG,EAKwB,EALxBA,OACAvD,EAIwB,EAJxBA,IACAyD,EAGwB,EAHxBA,eACAD,EAEwB,EAFxBA,kBACAI,EACwB,EADxBA,oBACAE,EAAwB,EAAxBA,kBAEA,OAAO,4BACL,kBAAC,EAAD,CACE9D,IAAKA,EACL9C,KAAMA,EACNqG,OAAQA,EACRC,kBAAmBA,EACnB5J,IAAG,UAAKoG,EAAL,YAAYuD,EAAOvK,MACtByK,eAAgBA,IAEjBF,EAAOE,GAAgB/J,KAAI,SAACqK,EAAc3L,GAAf,OAC1B,kBAAC,EAAD,CACEuL,MAAO3D,EACPA,IAAK5H,EACL8E,KAAMA,EACNqG,OAAQQ,EACRH,oBAAqBA,EACrBhK,IAAG,UAAKmK,EAAL,YAAqB3L,GACxBqL,eAAgBA,OAGpB,4BACsB,eAAnBA,EAAkC,KAAO,4BACxC3E,QAASgF,EACT3H,GAAE,UAAKe,EAAL,YAAa8C,IAFyB,UAGhCuD,EAAOvK,SC9CRgL,EAlBO,SAAC,GAAyB,IAAvBvK,EAAsB,EAAtBA,SAAUwK,EAAY,EAAZA,MACjC,OAAO,wBAAIhL,UAAU,iBAEnB,wBAAIC,MAAO,CAAEC,UAAW,OAAQ+K,cAAe,WAC7C,4BAAKD,IAGNxK,EAASC,KAAI,SAAAiJ,GAAO,OACnB,wBACEzJ,MAAO,CAAE4J,WAAY,QACrBlJ,IAAK+I,GACJA,MAGL,mCCiZWwB,EAzZQ,WAAO,IAAD,EAEChB,qBAFD,mBAEpBpK,EAFoB,KAEZsF,EAFY,KAGrB+F,EAAa7F,cAAYvF,KACzB8D,EAAUC,cAWhB,GAPAyB,qBAAU,WACR6F,IAAMC,IAAN,UAHc,wBAGd,iBACGC,MAAK,SAAAC,GACJnG,EAAUmG,EAAS1J,KAAK2D,MAAK,SAAA7C,GAAC,OAAIA,EAAE5C,OAASoL,WAEhD,CAACA,KAECrL,EACH,MAAO,aAGT,IAAM0L,EAAsB,SAACrH,GAC3BiB,EAAU,2BACLtF,GADI,kBAENqE,EAAMG,OAAOvE,KAAOoE,EAAMG,OAAOwF,UAIhC2B,EAAa,CAAC,QACdC,EAAiB,CAAC,kBAClBC,EAA0B,CAAC,aAAc,aAEzCC,EAA6B,SAACzH,EAAO4C,GACzC,IAAM8E,EAAa,eAAQ/L,GAC3B+L,EAAcrL,SAASuG,GAAO5C,EAAMG,OAAOwF,MAC3C1E,EAAUyG,IAGNC,EAA0B,SAAC3H,EAAO4C,GACtC,IAAM8E,EAAa,eAAQ/L,GAC3B+L,EAAchL,MAAMkG,GAAO5C,EAAMG,OAAOwF,MACxC1E,EAAUyG,IAGNE,EAAoB,SAAChF,GAkBzB,IAlB+C,IAAjBiF,EAAgB,wDACxCH,EAAa,eAAQ/L,GAErBmM,EAAc,SAACC,EAAOnF,EAAKiF,GAAuB,IAAlBG,EAAiB,uDAAT,KACxCH,EACFE,EAAME,OAAOrF,EAAK,EAAGoF,GAErBD,EAAME,OAAOrF,EAAK,IAOhBsF,EAAOC,OAAOD,KAAKvM,GACnByM,EAAmBzM,EAAOU,SAASpB,OAGzC,MAAkBiN,EAAlB,eAAwB,CAAnB,IAAM1L,EAAG,KAEZ,GAAI6B,MAAMgK,QAAQ1M,EAAOa,KAASb,EAAOa,GAAKvB,OAAS,EAGrD,GAAIU,EAAOa,GAAKvB,SAAWmN,GAA4B,iBAAR5L,GAA2Bb,EAAOa,GAAK,GAAGZ,MAMpF,GAA2B,kBAAhBD,EAAOa,IAAqBb,EAAOa,GAAK,GAAGZ,KAEzD,IAAK,IAAIZ,EAAI,EAAGA,EAAIW,EAAOa,GAAKvB,OAAQD,IAGtC,IADA,IAAMsN,EAAaH,OAAOD,KAAKvM,EAAOa,GAAKxB,IAC3C,MAAwBsN,EAAxB,eAAoC,CAA/B,IAAMC,EAAS,KACZC,EAAW7M,EAAOa,GAAKxB,GAAGuN,GAG5BlK,MAAMgK,QAAQG,IAAaA,EAASvN,SAAWmN,GACjDN,EAAYU,EAAU5F,EAAKiF,EAAK,YAdtCC,EAAYJ,EAAclL,GAAMoG,EAAKiF,EAAK,IAqBhD5G,EAAUyG,IAGNe,EAA2B,SAACzI,GAAW,IAAD,EACKA,EAAMG,OAAOpB,GAAGlE,MAAM,MAD3B,mBACnCiF,EADmC,KAC7B4I,EAD6B,KAClBC,EADkB,KACTC,EADS,KAEpClB,EAAa,eAAQ/L,GAC3B+L,EAAc5H,GAAM4I,GAAWC,GAASC,GAAc5I,EAAMG,OAAOwF,MACnE1E,EAAUyG,IAGNmB,EAAyB,SAAC7I,GAAW,IAAD,EAClBA,EAAMG,OAAOpB,GAAGlE,MAAM,MADJ,mBACjCiF,EADiC,KAC3BgJ,EAD2B,KAElCpB,EAAa,eAAQ/L,GAC3B+L,EAAc5H,GAAMgJ,GAAOlN,KAAOoE,EAAMG,OAAOwF,MAC/C1E,EAAUyG,IAQNqB,EAAiB,SAAC/I,GACtBA,EAAMC,iBACN,IAAMH,EAAOE,EAAMG,OAAOvE,KACpB0L,EAAajJ,MAAM1C,EAAOU,SAASpB,QAAQG,KAAK,KAAKP,MAAM,KAC3D6M,EAAa,eAAQ/L,GAC3B,OAAQmE,GACN,IAAK,SACH,IAAMkJ,EAAW,CACflJ,KAAM,GACNlE,KAAM,YACNkB,KAAMwK,GAERI,EAAc5H,GAAMrE,KAAKuN,GACzB/H,EAAUyG,GACV,MACF,IAAK,YACH,IAAMuB,EAAc,CAClBrN,KAAM,qBACNsB,eAAgBoK,GAElBI,EAAc5H,GAAMrE,KAAKwN,GACzBhI,EAAUyG,GACV,MACF,IAAK,qBACH,IACMwB,EAAuB,CAC3BtN,KAAM,mBACN0B,UAAWgK,EACX9J,WAJuBa,MAAM1C,EAAOU,SAASpB,QAAQG,KAAK,KAAKP,MAAM,MAMvE6M,EAAc5H,GAAMrE,KAAKyN,GACzBjI,EAAUyG,GACV,MACF,QACErH,QAAQC,IAAR,0CAA+CN,EAAMG,OAAOvE,SAK5D8K,EAAoB,SAAC1G,GACzBA,EAAMC,iBAD6B,MAEfD,EAAMG,OAAOpB,GAAGlE,MAAM,KAFP,mBAE5BiF,EAF4B,KAEtB8C,EAFsB,KAG7B8E,EAAa,eAAQ/L,GAC3B+L,EAAc5H,GAAMmI,OAAOrF,EAAK,GAChC3B,EAAUyG,IAGN7H,EAAU,CACdsJ,OAAQ,MACRtJ,QAAS,OAGLuJ,EAAa,CACjBrN,UAAW,SACXsN,OAAQ,sBACRC,aAAc,MACdH,OAAQ,iBAIV,OAAO,yBAAKtN,UAAU,0BAA0BC,MAAO,CAAEyN,SAAU,QACjE,yBAAK1N,UAAU,yBAAyBC,MAAO,CAAEC,UAAW,OAAQC,WAAY,SAC9E,8BAEE,wBAAIF,MAAO,CACTC,UAAW,SACXsN,OAAQ,iBACRxJ,QAAS,MACTyJ,aAAc,QAJhB,WAMW3N,EAAOC,MAGlB,yBAAKC,UAAU,cAEb,2BAAO2N,QAAQ,QAAf,cAAiC,8BACjC,2BAAO1J,KAAK,OACVlE,KAAK,OACL+J,MAAOhK,EAAOC,KACdmE,SAAUsH,EACVzB,KAAK,OAGP,6BAEA,2BAAO4D,QAAQ,eAAf,qBAA+C,8BAC/C,2BAAO1J,KAAK,OACVlE,KAAK,cACL+J,MAAOhK,EAAOM,YACd8D,SAAUsH,EACVzB,KAAK,QAKT,6BAEA,2BAAO4D,QAAQ,WAAf,uBACA,2BAAO1J,KAAK,OACVlE,KAAK,UACL+J,MAAOhK,EAAOQ,QACd4D,SAAUsH,EACVzB,KAAK,IACL9J,MAAOsN,IAGT,6BAEA,2BAAOI,QAAQ,qBAAf,6BACA,2BAAO1J,KAAK,OACVlE,KAAK,oBACL+J,MAAkC,IAA3BhK,EAAO8N,kBACd1J,SAAU,SAACxD,GACTA,EAAE4D,OAAOwF,OAAS,IAClB0B,EAAoB9K,IAEtBqJ,KAAK,IACL9J,MAAOsN,IAvDX,IA2DE,6BAEA,2BAAOI,QAAQ,sBAAf,uBACA,2BAAO1J,KAAK,OACVlE,KAAK,qBACL+J,MAAOhK,EAAOO,mBACd6D,SAAUsH,EACVzB,KAAK,IACL9J,MAAOsN,IAnEX,IAsEE,yBAAKtN,MAAO,CAAEC,UAAW,UACvB,8CAEA,4BAAQ2F,QAASqH,EAAgBnN,KAAK,YAAYE,MAAO+D,GAAzD,sBAGA,4BAAQ6B,QAASqH,EAAgBnN,KAAK,SAASE,MAAO+D,GAAtD,aAGA,4BAAQ6B,QAASqH,EAAgBnN,KAAK,qBAAqBE,MAAO+D,GAAlE,2BAIF,6BAGA,2BACE6J,YAAY,IACZ7N,UAAU,mBACV,+BACE,4BACE,wBAAIC,MAAO,CAAEC,UAAW,SAAU,yCACjCJ,EAAOU,SAASC,KAAI,SAACiJ,EAAS3C,GAAV,OACnB,wBAAIpG,IAAG,UAAK+I,EAAL,YAAgB3C,IACrB,kBAAC,EAAD,CACE9C,KAAK,WACLyF,QAASA,EACTC,cAAeiC,EACfhC,aAAcmC,EACdhF,IAAKA,QAIX,wBACElB,QAAS,kBAAMkG,EAAkBjM,EAAOU,SAASpB,QAAQ,IACzDa,MAAO,CACLC,UAAW,OACX4N,SAAU,UACVjE,WAAY,OACZkE,OAAQ,YANZ,OAYJ,+BACE,4BACE,wBAAI9N,MAAO,CAAEC,UAAW,UAAxB,SACCJ,EAAOe,MAAMJ,KAAI,SAACwJ,EAAMlD,GAAP,OAChB,wBACEpG,IAAG,UAAKb,EAAOU,SAASuG,GAArB,YAA6BkD,EAA7B,YAAqClD,IACxC,kBAACiH,EAAD,CACE/D,KAAMA,EACNlD,IAAKA,EACL4C,cAAemC,QAIrB,kCAGF,kBAAC,EAAD,CAAetL,SAAUV,EAAOU,SAAUwK,MAAM,oBAE/ClL,EAAOqB,UAAUV,KAAI,SAAC6J,EAAQ2C,GAAT,OACpBvB,EAAejL,KAAI,SAAA+J,GAAc,OAC/B,kBAAC,EAAD,CACEF,OAAQA,EACRvD,IAAKkG,EACL1C,kBAAmByC,EACnBrC,oBAAqBiC,EACrB/B,kBAAmBA,EACnB5G,KAAK,YACLuG,eAAgBA,EAChB7J,IAAK2J,EAAOvK,aAKlB,kBAAC,EAAD,CAAeS,SAAUV,EAAOU,SAAUwK,MAAM,WAE/ClL,EAAOiB,OAAON,KAAI,SAACsF,EAAOkI,GAAR,OACjBxC,EAAWhL,KAAI,SAAA+J,GAAc,OAC3B,kBAAC,EAAD,CACEF,OAAQvE,EACRgB,IAAKkH,EACL1D,kBAAmByC,EACnBrC,oBAAqBiC,EACrB/B,kBAAmBA,EACnB5G,KAAK,SACLuG,eAAgBA,EAChB7J,IAAKoF,EAAMhG,aAKjB,kBAAC,EAAD,CAAeS,SAAUV,EAAOU,SAAUwK,MAAM,wBAE/ClL,EAAOwB,mBAAmBb,KAAI,SAAC6J,EAAQ2C,GAAT,OAC7BtB,EAAwBlL,KAAI,SAAA+J,GAAc,OACxC,kBAAC,EAAD,CACEF,OAAQA,EACRvD,IAAKkG,EACL1C,kBAAmByC,EACnBrC,oBAAqBiC,EACrB/B,kBAAmBA,EACnB5G,KAAK,qBACLuG,eAAgBA,EAChB7J,IAAG,UAAK2J,EAAOvK,KAAZ,YAAoByK,WAK7B,4BACE,wBAAI0D,QAASpO,EAAOU,SAASpB,OAAS,GACpC,6BAAM,+BAGV,4BACE,iCACCU,EAAOU,SAASC,KAAI,SAACiJ,EAAS3C,GAC7B,OAAIjH,EAAOU,SAASpB,OAAS,EACpB,wBAAIuB,IAAG,yBAAoB+I,EAApB,YAA+B3C,IAC3C,4BAAQlB,QAAS,SAACnF,GAAD,OAAOA,EAAE0D,kBAAkBnE,MAAO,CAAEwF,MAAO,SAA5D,SACQ,6BAAOiE,IAIZ,wBAAI/I,IAAG,yBAAoB+I,EAApB,YAA+B3C,IAC3C,4BAAQlB,QAAS,kBAAMkG,EAAkBhF,GAAK,IAAQ9G,MAAO,CAAEwF,MAAO,QAAtE,SACQ,6BAAOiE,OAKnB,oCAKN,6BAEA,yBAAKzJ,MAAO,CAAEC,UAAW,UACvB,yBAAKD,MAAO,CAAEkO,QAAS,SAAUjO,UAAW,UAC1C,4BACE+D,KAAK,SACL4B,QA1RQ,SAAA1B,GAClBA,EAAMC,iBACNI,QAAQC,IAAI,mBAAoB3E,IAyRtBG,MAAO,CAAEqN,OAAQ,OAAQtJ,QAAS,QAHpC,iBAQF,yBAAK/D,MAAO,CAAEkO,QAAS,SAAUjO,UAAW,SAC1C,4BACE+D,KAAK,SACL4B,QAAS,kBAAMhC,EAAQjE,KAAK,MAC5BK,MAAO,CAAEqN,OAAQ,OAAQtJ,QAAS,QAHpC,0BChVGoK,EArDH,WAAO,IAAD,EACUlE,mBAAS,MADnB,mBACThF,EADS,KACFvB,EADE,OAEQuG,qBAFR,mBAETrI,EAFS,KAEH+B,EAFG,OAGYsG,qBAHZ,mBAGTpK,EAHS,KAGDsF,EAHC,OAIc8E,qBAJd,mBAIT/E,EAJS,KAIAkJ,EAJA,KAahB,OALA9I,qBAAU,WACW6F,IAAMC,IAAN,UAHL,OAGK,aACRC,MAAK,SAAAC,GAAQ,OAAI8C,EAAW9C,EAAS1J,WAC/C,IAEI,6BACL,kBAACyG,EAAA,EAAD,KACE,0BAAMC,QAAQ,UACd,sEAGF,kBAAC,IAAD,KACE,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAO+F,KAAK,WACV,kBAAC,EAAD,CAAQxO,OAAQA,KAGlB,kBAAC,IAAD,CAAOwO,KAAK,WACV,kBAAC,EAAD,CAAQxO,OAAQA,EAAQ+B,KAAMA,EAAM8B,SAAUA,KAGhD,kBAAC,IAAD,CAAO2K,KAAK,eACV,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,CACEpJ,MAAOA,EACPpF,OAAQA,EACRqF,QAASA,EACTC,UAAWA,EACXzB,SAAUA,EACVC,QAASA,KAGb,kBAAC,IAAD,CAAO0K,KAAK,KACV,kBAAC,EAAD,CAAcxO,OAAQA,EAAQqF,QAASA,EAASC,UAAWA,EAAWF,MAAOA,S,MClDvFqJ,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.d1fa8b52.chunk.js","sourcesContent":["\r\nconst csvParser = (input) => {\r\n\r\n  const fileData = input;\r\n\r\n  const splitFileData = fileData.split(\"\\n\");\r\n\r\n  const fieldNames = splitFileData[0].trim().split(\",\");\r\n\r\n  // modify field names to not allow spaces -> replace with underscore\r\n  for (let i = 0; i < fieldNames.length; i++) {\r\n    let currentFieldName = fieldNames[i];\r\n    currentFieldName = fieldNames[i].toLowerCase();\r\n    const isMultipleWords = fieldNames[i].split(\" \").length > 1;\r\n    if (isMultipleWords) {\r\n      currentFieldName = currentFieldName.split(\" \").join(\"_\");\r\n    }\r\n    fieldNames[i] = currentFieldName;\r\n  }\r\n\r\n  let parsedData = [];\r\n\r\n  for (let i = 1; i < splitFileData.length; i++) {\r\n    const currentLine = splitFileData[i];\r\n    const lineItems = currentLine.split(\",\");\r\n    let currentLineObject = {};\r\n\r\n    for (let j = 0; j < lineItems.length; j++) {\r\n      currentLineObject[fieldNames[j]] = lineItems[j];\r\n    }\r\n\r\n    if (currentLineObject[fieldNames[0]].length > 0) {\r\n      parsedData.push(currentLineObject);\r\n    }\r\n\r\n  }\r\n\r\n  return parsedData;\r\n\r\n}\r\n\r\nmodule.exports = csvParser;","import React from 'react'\r\n\r\nconst Method = ({ method }) => {\r\n  if (method && method.name) {\r\n    return <div className='centeredContainerParent'>\r\n      <div className='centeredContainerChild' style={{ textAlign: 'left', paddingTop: '15px' }}>\r\n        <h2>{method.name}</h2>\r\n        <h3>{method.description}</h3>\r\n\r\n        <h4>Percent RPD for duplicates: {method.duplicateTolerance}</h4>\r\n        <h4>Number of significant figures on report: {method.sigFigs}</h4>\r\n\r\n        <p>Calibration Standard concentrations: {method.calStandards.join(', ')}</p>\r\n\r\n        <table className='methodTable stripedTable'>\r\n\r\n          <thead>\r\n            <tr>\r\n              <th className='firstCol'>Elements</th>\r\n              {method.elements.map(e =>\r\n                <th key={e}>{e}</th>\r\n              )}\r\n            </tr>\r\n          </thead>\r\n\r\n          <tbody>\r\n\r\n            <tr style={{ borderTop: '1px solid grey' }}>\r\n              <td className='firstCol'>Units</td>\r\n              {method.units.map((u, i) =>\r\n                <td key={u + i}>{u}</td>\r\n              )}\r\n            </tr>\r\n\r\n            {method.blanks.map((b, i) =>\r\n              <tr key={b.name + i} style={i === 0 ? { borderTop: '1px solid grey' } : null}>\r\n                <td className='firstCol'>{b.name} LOQs</td>\r\n                {b.LOQs.map((loq, i) =>\r\n                  <td key={i}>{loq || '- -'}</td>\r\n                )}\r\n              </tr>\r\n            )}\r\n\r\n            {method.checkStds.map((c, i) =>\r\n              <tr key={c.name + i} style={i === 0 ? { borderTop: '1px solid grey' } : null}>\r\n                <td className='firstCol'>{c.name}</td>\r\n                {c.expectedValues.map((e, i) =>\r\n                  <td key={i}>{e}</td>\r\n                )}\r\n              </tr>\r\n            )}\r\n\r\n            {method.referenceMaterials.map((r, i) =>\r\n              <React.Fragment key={r.name} >\r\n                <tr style={{ borderTop: '1px solid grey' }}>\r\n                  <td className='firstCol'>{r.name} Low</td>\r\n                  {r.rangesLow.map((e, i) =>\r\n                    <td key={i}>{e || '- -'}</td>\r\n                  )}\r\n                </tr><tr style={{ borderBottom: '1px solid grey' }}>\r\n                  <td className='firstCol'>{r.name} High</td>\r\n                  {r.rangesHigh.map((e, i) =>\r\n                    <td key={i}>{e || '- -'}</td>\r\n                  )}\r\n                </tr>\r\n              </React.Fragment>\r\n            )}\r\n\r\n          </tbody>\r\n\r\n        </table>\r\n      </div>\r\n    </div>\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n\r\nexport default Method","\r\nconst parseJsonData = (output) => {\r\n\r\n  const data = []\r\n  const dupRegEx = new RegExp(' (d|dup)', 'i')\r\n\r\n  const firstElementMass = output[0].mass\r\n  let i = 1;\r\n  let massesPresent = [parseInt(output[0].mass)]\r\n  while (output[i].mass !== firstElementMass) {\r\n    massesPresent.push(parseInt(output[i].mass))\r\n    i++;\r\n  }\r\n  const elementCount = i;\r\n  massesPresent.sort((a, b) => a - b)\r\n\r\n  for (let i = 0; i < output.length; i += elementCount) {\r\n\r\n    let values = new Array(elementCount)\r\n    let units = []\r\n\r\n    for (let j = 0; j < elementCount; j++) {\r\n      const findMassIndex = massesPresent.findIndex(m => m === parseInt(output[i + j].mass))\r\n      values[findMassIndex] = Number(output[i + j].concentration)\r\n      units.push(output[i + j].units)\r\n    }\r\n\r\n    if (data.length > 1 && output[i].sample_name.match(dupRegEx)) {\r\n      data[data.length - 1].dupValues = values\r\n    } else {\r\n      const sampleObject = {\r\n        id: output[i].sample_name,\r\n        values,\r\n        dupValues: null,\r\n        units\r\n      }\r\n      data.push(sampleObject)\r\n    }\r\n  }\r\n  return data\r\n}\r\n\r\nconst roundToSigFigs = (number, sigFigs) => {\r\n  let oom = 0;\r\n  let result = Number(number);\r\n\r\n  if (number > 10) {\r\n    while (result > 10) {\r\n      result /= 10;\r\n      oom += 1;\r\n    }\r\n  }\r\n  else if (number < 0.0001 && number > 0) {\r\n    return '0.00'\r\n  }\r\n  else if (number < 10) {\r\n    while (result < 1 && result > 0) {\r\n      if (result < 0) {\r\n        result = result * (-1);\r\n      }\r\n      result = result * 10;\r\n      oom += 1;\r\n    }\r\n  }\r\n  if (number > 10) {\r\n    result = number / Math.pow(10, oom);\r\n    result = result * Math.pow(10, sigFigs - 1);\r\n    result = Math.round(result)\r\n    result = result / Math.pow(10, sigFigs - oom - 1)\r\n    result = result.toPrecision(sigFigs)\r\n\r\n  } else if (number < 0) {\r\n    result = number * Math.pow(10, sigFigs + 1);\r\n    result = Math.round(result);\r\n    result = result / Math.pow(10, sigFigs + 1)\r\n    result.toPrecision(sigFigs)\r\n\r\n  } else if (number < 1) {\r\n    result = number * Math.pow(10, oom);\r\n    result = result * Math.pow(10, sigFigs - 1)\r\n    result = Math.round(result)\r\n    result = result / Math.pow(10, sigFigs + oom - 1)\r\n    result = result.toPrecision(sigFigs)\r\n\r\n  }\r\n  else {\r\n    result = (number.toPrecision(sigFigs));\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nexport default { parseJsonData, roundToSigFigs }","import React from 'react'\r\n\r\nimport dataUtils from '../utils/dataUtils'\r\nimport csvParse from '../utils/csvParse'\r\n\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst FileSelector = ({ setError, setData, method }) => {\r\n  const history = useHistory()\r\n  const fileHandler = (event) => {\r\n    event.preventDefault()\r\n    const inputFile = event.target.files[0]\r\n    if (inputFile.type !== \"text/plain\") {\r\n      console.log(\"wrong file type\")\r\n      setError(\"Please use a text file\")\r\n      return\r\n    }\r\n    history.push('/report')\r\n\r\n    const reader = new FileReader()\r\n    reader.readAsText(inputFile)\r\n    reader.onloadend = () => {\r\n      const jsonData = csvParse(reader.result)\r\n      const parsedData = dataUtils.parseJsonData(jsonData)\r\n      setData(parsedData)\r\n    }\r\n  }\r\n  return (\r\n    <div className='centeredContainerParent' style={{ height: '60px', padding: '25px' }}>\r\n      <div className='centeredContainerChild'>\r\n        {method.name && <input type=\"file\" id=\"inputFile\" name=\"inputFile\" onChange={fileHandler} />}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FileSelector","import React, { useEffect } from 'react'\r\nimport { Link, useParams, useHistory } from 'react-router-dom'\r\n\r\nimport Method from './Method'\r\nimport FileSelector from './FileSelector'\r\n\r\nconst MethodSelect = ({ error, method, methods, setData, setError, setMethod }) => {\r\n\r\n  const nameFromUrl = useParams().name\r\n  const history = useHistory()\r\n  useEffect(() => {\r\n    if (nameFromUrl && methods) {\r\n      setMethod(methods.find(m => m.name === nameFromUrl))\r\n    }\r\n  }, [methods, nameFromUrl, setMethod])\r\n\r\n  if (!methods) {\r\n    return <div>Loading...</div>\r\n  }\r\n\r\n  return <div className='methodButtons'>\r\n    <div>\r\n      <h1 style={{ textAlign: 'center' }}>JCQC Reporting Application</h1>\r\n      {error && <span style={{ color: 'red' }}>Error: {error}</span>}\r\n      <hr style={{ width: '36rem', marginBottom: '1rem' }} />\r\n      {methods.map(m => {\r\n        return <span key={m.name}><Link to={`/${m.name}`} className='methodButton' onClick={() => setMethod(m)}>{m.name}</Link>{' '}</span>\r\n      })\r\n      }\r\n\r\n      <Link to='/' className='methodButton' onClick={() => setMethod()}>Clear</Link>\r\n      {method && <><br /><br /><button onClick={() => history.push(`/edit/${method.name}`)} className='methodButton'>Edit {method.name}</button></>}\r\n\r\n      {method && (<div>\r\n        <FileSelector setError={setError} method={method} setData={setData} />\r\n        <Method method={method} />\r\n      </div>)}\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport default MethodSelect","import React from 'react'\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst Blank = ({ data, method, blank, LOQs }) => {\r\n  return (\r\n    <div>\r\n      <br />\r\n      <table className='blankTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Sample Type</th>\r\n            {method.elements.map((e, i) =>\r\n              <th key={e}>\r\n                {e + ' (' + method.units[i] + ')'}\r\n              </th>\r\n            )}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          <tr>\r\n            <td className='firstCol'>{data.id}</td>\r\n            {data.values.map(v =>\r\n              <td key={v}>\r\n                {dataUtils.roundToSigFigs(v, method.sigFigs)}\r\n              </td>\r\n            )}\r\n          </tr>\r\n          <tr>\r\n            <td className='firstCol'>Below LOQ</td>\r\n            {data.values.map((v, i) => {\r\n              const hasLOQ = LOQs[i]\r\n              const passes = v < blank.LOQs[i]\r\n              return <td key={v}\r\n                className={hasLOQ ? passes ? 'samplePass' : 'sampleFail' : 'sampleNeutral'}>\r\n                {hasLOQ ? LOQs[i] : '- - -'}\r\n              </td>\r\n            })\r\n            }\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Blank","import React from 'react'\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst Sample = ({ data, sigFigs, coloured }) => {\r\n\r\n  return (\r\n    <tr className={coloured ? 'colouredRow' : ''}>\r\n      <td className='firstCol'>{data.id}</td>\r\n      {data.values.map((v, i) => {\r\n        return <td key={data.id + data.values[i]}>\r\n          {v > 1000 ? parseFloat(dataUtils.roundToSigFigs(v, sigFigs)) : dataUtils.roundToSigFigs(v, sigFigs)}\r\n        </td>\r\n      })\r\n      }\r\n\r\n    </tr>\r\n  )\r\n}\r\n\r\n\r\nconst Samples = ({ samples, sigFigs }) => {\r\n  return <>\r\n    {samples.map((s, i) => {\r\n      return <Sample key={s.id} data={s} sigFigs={sigFigs} coloured={i % 2} />\r\n    })\r\n    }\r\n  </>\r\n}\r\n\r\n\r\nexport default Samples","import React from 'react'\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst Duplicate = ({ data, method }) => {\r\n  const getLowestLOQs = (methodBlanks) => {\r\n    let lowestLOQs = []\r\n    for (const blankType of methodBlanks) {\r\n      for (let i = 0; i < blankType.LOQs.length; i++) {\r\n        const currentLOQ = blankType.LOQs[i]\r\n        if (currentLOQ && (!lowestLOQs[i] || currentLOQ < lowestLOQs[i])) {\r\n          lowestLOQs[i] = blankType.LOQs[i]\r\n        }\r\n      }\r\n    }\r\n    return lowestLOQs\r\n  }\r\n  const LOQs = getLowestLOQs(method.blanks)\r\n  const sigFigs = method.sigFigs\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <table className='RMTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Sample ID</th>\r\n            {method.elements.map((e, i) =>\r\n              <th key={e}>\r\n                {e + ' (' + method.units[i] + ')'}\r\n              </th>\r\n            )}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          <tr>\r\n            <td className='firstCol'>{data.id}</td>\r\n            {data.values.map(v =>\r\n              <td key={v}>\r\n                {v > 1000 ? parseFloat(dataUtils.roundToSigFigs(v, sigFigs)) : dataUtils.roundToSigFigs(v, sigFigs)}\r\n              </td>\r\n            )}\r\n          </tr>\r\n\r\n          <tr className='thickBottomBorder'>\r\n            <td className='firstCol'>{data.id} DUP</td>\r\n            {data.dupValues.map(v =>\r\n              <td key={v}>\r\n                {v > 1000 ? parseFloat(dataUtils.roundToSigFigs(v, sigFigs)) : dataUtils.roundToSigFigs(v, sigFigs)}\r\n              </td>\r\n            )}\r\n          </tr>\r\n\r\n          <tr>\r\n            <td className='firstCol'>Average</td>\r\n            {data.values.map((v, idx) => {\r\n              const averageValue = (v + data.dupValues[idx]) / 2\r\n              return <td key={v}>\r\n                {v > 1000 ? parseFloat(dataUtils.roundToSigFigs(averageValue, sigFigs)) : dataUtils.roundToSigFigs(averageValue, sigFigs)}\r\n              </td>\r\n            }\r\n            )}\r\n          </tr>\r\n\r\n          <tr>\r\n            <td className='firstCol'>RPD (%)</td>\r\n            {data.values.map((v, i) => {\r\n              const average = ((v + data.dupValues[i]) / 2)\r\n              const RPD = ((Math.abs(v - data.dupValues[i]) / average * 100).toFixed(1))\r\n              const aboveLOQ = v > LOQs[i] && LOQs[i]\r\n              return <td className={aboveLOQ ? RPD < method.duplicateTolerance ? 'samplePass' : 'sampleFail' : 'sampleNeutral'} key={v + i}>{RPD}</td>\r\n            })\r\n            }\r\n          </tr>\r\n        </tbody>\r\n\r\n      </table>\r\n      <br />\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Duplicate","import React from 'react'\r\n\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst Duplicate = ({ data, elements, method }) => {\r\n\r\n  return (\r\n    <div>\r\n      <h1>Calibration Data</h1>\r\n\r\n      <table className='calTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Concentration</th>\r\n            {method.elements.map((e, i) => <th key={e}>{e} ({method.units[i]})</th>)}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n\r\n          {data.map((std, i) => {\r\n            return <tr key={std.id + i}>\r\n              <td className='firstCol'>{std.id}</td>\r\n              {std.values.map((v, i) => {\r\n                return <td key={v + i}>{v < 0.001 && std.name !== 'Hg' ? '0.00' : dataUtils.roundToSigFigs(v, method.sigFigs)}</td>\r\n              }\r\n              )}\r\n            </tr>\r\n          })\r\n          }\r\n\r\n        </tbody>\r\n      </table>\r\n      <br />\r\n\r\n\r\n      <h1>Sample Data</h1>\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Duplicate","import React from 'react'\r\n\r\nconst SampleBlock = (props) => {\r\n  const elements = props.elements\r\n  const units = props.units\r\n\r\n  return (\r\n    <>\r\n      <br />\r\n      <table className='sampleTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Sample ID</th>\r\n            {elements.map((e, i) => <th key={e} >{e + ' (' + units[i] + ')'}</th>)}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.children}\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SampleBlock","import React from 'react'\r\n\r\nconst HeaderInfo = ({ method }) => {\r\n  return <div>\r\n    <h1>Sequence Information - {method.name}</h1>\r\n    <div className='headerItem'>Analyst: _________________________</div>\r\n    <div className='headerItem'>Analysis Date: _________________________</div>\r\n    <div className='headerItem'>Sequence ID: ______________________________________</div>\r\n    <div className='headerItem'>Software Version: MassHunter v4.6</div>\r\n    <div className='headerItem'>Autosampler Info: ESI prepFAST SC4</div>\r\n  </div>\r\n}\r\n\r\nexport default HeaderInfo","import React from 'react'\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst CheckStd = ({ data, checkStd, method }) => {\r\n\r\n  const expectedValues = checkStd.expectedValues\r\n  const tolerance = checkStd.tolerance\r\n  const sigFigs = method.sigFigs\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <table className='RMTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Sample Type</th>\r\n            {method.elements.map((e, i) => <th key={e}>{e} (ppb)</th>)}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          <tr>\r\n            <td className='firstCol'>{data.id}</td>\r\n            {data.values.map((v, i) => {\r\n              if (v < 1) {\r\n                v = v * 1000\r\n              }\r\n              return <td key={v + i}>{dataUtils.roundToSigFigs(v, sigFigs)}</td>\r\n            })\r\n            }\r\n          </tr>\r\n          <tr>\r\n            <td className='firstCol'>Within Range</td>\r\n            {data.values.map((v, i) => {\r\n              if (v < 1) {\r\n                v = v * 1000\r\n              }\r\n              const limitLow = expectedValues[i] - (expectedValues[i] * tolerance)\r\n              const limitHigh = expectedValues[i] + (expectedValues[i] * tolerance)\r\n              const withinRange = (v > limitLow) && (v < limitHigh)\r\n              return <td className={withinRange ? 'samplePass' : 'sampleFail'} key={v + i}> {withinRange ? 'Yes' : 'No'}</td>\r\n            })\r\n            }\r\n          </tr>\r\n        </tbody>\r\n\r\n      </table>\r\n      <br />\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default CheckStd","import React from 'react'\r\nimport dataUtils from '../../utils/dataUtils'\r\n\r\nconst ReferenceMaterial = ({ data, material, method }) => {\r\n  const rangesLow = material.rangesLow\r\n  const rangesHigh = material.rangesHigh\r\n\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <table className='RMTable'>\r\n        <thead>\r\n          <tr>\r\n            <th className='firstCol'>Sample Type</th>\r\n            {method.elements.map((e, i) =>\r\n              <th key={e}>\r\n                {e + ' (' + method.units[i] + ')'}\r\n              </th>\r\n            )}\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          <tr>\r\n            <td className='firstCol'>{data.id}</td>\r\n            {data.values.map((v, i) =>\r\n              <td key={v + i}>\r\n                {parseFloat(dataUtils.roundToSigFigs(v, method.sigFigs))}\r\n              </td>\r\n            )}\r\n          </tr>\r\n          <tr>\r\n            <td className='firstCol'>Within Range</td>\r\n            {data.values.map((v, i) => {\r\n              const hasRange = material.rangesHigh[i]\r\n              const withinRange = (v > rangesLow[i] && v < rangesHigh[i])\r\n              return <td\r\n                className={withinRange ? 'samplePass' : hasRange ? 'sampleFail' : 'sampleNeutral'}\r\n                key={v + i}> {withinRange ? 'Yes' : hasRange ? 'No' : '- - -'}\r\n              </td>\r\n            })\r\n            }\r\n          </tr>\r\n        </tbody>\r\n\r\n      </table>\r\n      <br />\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default ReferenceMaterial","import React from 'react'\r\nimport { Helmet } from 'react-helmet'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport Blank from './Blank'\r\nimport Samples from './Sample'\r\nimport Duplicate from './Duplicate'\r\nimport Calibration from './Calibration'\r\nimport SampleBlock from './SampleBlock'\r\nimport HeaderInfo from './HeaderInfo'\r\nimport CheckStd from './CheckStd'\r\nimport ReferenceMaterial from './ReferenceMaterial'\r\n\r\nconst Report = ({ data, method }) => {\r\n\r\n  const sampleIdRegEx = new RegExp('[0-9]{2}-[0-9]{6}-[0-9]{4}')\r\n\r\n  if (!data) {\r\n    return <div style={{ textAlign: 'center' }}>\r\n      Loading data. If your report doesn't load soon,\r\n      &nbsp;<Link to='/'>click here</Link> to restart.\r\n      </div>\r\n  }\r\n\r\n  return (\r\n    <div>\r\n\r\n      <Helmet>\r\n        <meta charSet=\"utf-8\" />\r\n        <title>JCQC Reporting Application</title>\r\n      </Helmet>\r\n\r\n      {method && (method.elements.length !== data[0].values.length) &&\r\n        <div style={{ color: 'red' }}>\r\n          Warning: expected {method.elements.length} element{method.elements.length === 1 ? '' : 's'}, found {data[0].values.length}.\r\n          Possible method mismatch.\r\n        </div>}\r\n\r\n      <HeaderInfo method={method} />\r\n      {data[0].id && data.map((d, idx) => {\r\n\r\n        const sampleBlank = method.blanks.find(b => b.name === d.id)\r\n        const checkStd = method.checkStds.find(c => c.name === d.id)\r\n        const referenceMaterial = method.referenceMaterials.find(r => r.name === d.id)\r\n        // const duplicate = d.id.match(sampleIdRegEx) && d.dupValues\r\n        const duplicate = d.dupValues\r\n        const sample = d.id.match(sampleIdRegEx)\r\n\r\n        if (d.id === 'Cal Blank') {\r\n          const calData = data.slice(idx, idx + method.calStandards.length)\r\n          return <Calibration\r\n            data={calData}\r\n            key={idx}\r\n            method={method}\r\n          />\r\n        }\r\n        else if (sampleBlank) {\r\n          const LOQs = method.blanks.find(b => b.type === sampleBlank.type).LOQs\r\n          return <Blank\r\n            data={d}\r\n            key={idx}\r\n            blank={sampleBlank}\r\n            method={method}\r\n            LOQs={LOQs}\r\n          />\r\n        }\r\n        else if (checkStd) {\r\n          return <CheckStd\r\n            data={d}\r\n            key={idx}\r\n            checkStd={checkStd}\r\n            method={method}\r\n          />\r\n        }\r\n        else if (referenceMaterial) {\r\n          const LOQs = method.blanks.find(b => b.type === referenceMaterial.type)\r\n          if (!duplicate) {\r\n            return <ReferenceMaterial\r\n              data={d}\r\n              key={d.id + idx}\r\n              method={method}\r\n              material={referenceMaterial}\r\n              LOQs={LOQs}\r\n            />\r\n          } else {\r\n            return <div key={d.id + idx}><ReferenceMaterial\r\n              data={d}\r\n              method={method}\r\n              material={referenceMaterial}\r\n              LOQs={LOQs}\r\n            />\r\n              <Duplicate\r\n                data={d}\r\n                method={method}\r\n              />\r\n            </div>\r\n          }\r\n        }\r\n        else if (duplicate) {\r\n          return <Duplicate\r\n            data={d}\r\n            key={d.dupValues.length + idx}\r\n            method={method}\r\n          />\r\n        }\r\n        else if (sample) {\r\n          const prevSampleExists = data[idx - 1]\r\n          const prevSampleIsSample = data[idx - 1].id.match(sampleIdRegEx)\r\n          const prevSampleIsDup = data[idx - 1].dupValues\r\n\r\n          // If this is the first sample of a block of samples,\r\n          // we'll start a new block with headers and such.\r\n          if (prevSampleExists && (!prevSampleIsSample || prevSampleIsDup)) {\r\n\r\n            // start a list of the samples in this block\r\n            let sampleList = [d]\r\n            let stillASample = true\r\n            let j = idx + 1\r\n\r\n            // This loop will stay true until the end of the sample\r\n            // block is reached, or we hit a duplicate\r\n            while (stillASample) {\r\n              const isASample = data[j].id.match(sampleIdRegEx)\r\n              const isADup = data[j].dupValues\r\n              stillASample = isASample && !isADup\r\n              if (stillASample) sampleList.push(data[j])\r\n              ++j\r\n            }\r\n\r\n\r\n            // If it's not the first sample of a new block,\r\n            // we can safely skip it because we will pass\r\n            // all of the samples in the block to this component\r\n            return <div key={d.id + idx}>\r\n              <SampleBlock\r\n                elements={method.elements}\r\n                data={d}\r\n                key={Date.now()}\r\n                units={method.units}>\r\n                <Samples samples={sampleList}\r\n                  key={idx}\r\n                  sigFigs={method.sigFigs}\r\n                />\r\n              </SampleBlock>\r\n            </div>\r\n          }\r\n        }\r\n        return null\r\n      })\r\n      }\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default Report","import React from 'react'\r\n\r\nconst SingleInput = ({ element, idx, changeHandler, elementAdder }) => {\r\n  return <span>\r\n    <span className=\"insertSpan\" onClick={() => elementAdder(idx, true)}>+</span>\r\n    <input type=\"text\"\r\n      style={{ fontWeight: 'bold' }}\r\n      name={`elements-${idx}`}\r\n      value={element || ' '}\r\n      onChange={(e) => changeHandler(e, idx)}\r\n      size=\"2\"\r\n      autoFocus\r\n    />\r\n  </span >\r\n}\r\n\r\nexport default SingleInput","import React, { useState } from 'react'\r\n\r\nconst SingleInput = ({ unit, idx, changeHandler }) => {\r\n  const [value, setValue] = useState(unit)\r\n  return <span>\r\n    <input type=\"text\"\r\n      name={`elements-${idx}`}\r\n      value={value}\r\n      onChange={(e) => setValue(e.target.value)}\r\n      onBlur={(e) => changeHandler(e, idx)}\r\n      size=\"2\"\r\n    />\r\n  </span>\r\n}\r\n\r\nexport default SingleInput","import React, { useState } from 'react'\r\n\r\nconst NameInput = ({ object, idx, nameChangeHandler, type, arrayToDisplay }) => {\r\n  const [value, setValue] = useState(object.name)\r\n  return <td>\r\n    {arrayToDisplay === 'rangesLow' ? null :\r\n      <input\r\n        type='text'\r\n        id={`${type}~~${idx}`}\r\n        value={value || ' '}\r\n        onChange={(event) => setValue(event.target.value)}\r\n        onBlur={nameChangeHandler}\r\n        size=\"15\"\r\n      />}\r\n    {arrayToDisplay === 'rangesHigh' ? 'High Cutoff' : null}\r\n    {arrayToDisplay === 'rangesLow' ? 'Low Cutoff' : null}\r\n    {arrayToDisplay === 'LOQs' ? 'LOQs' : null}\r\n  </td>\r\n}\r\n\r\nconst NumberInput = ({ Index, idx, object, numberChangeHandler, type, arrayToDisplay }) => {\r\n  const [value, setValue] = useState(object || '')\r\n  return <td>\r\n    <input\r\n      type='text'\r\n      id={`${type}~~${Index}~~${arrayToDisplay}~~${idx}`}\r\n      value={value || ' '}\r\n      onChange={(event) => setValue(event.target.value)}\r\n      onBlur={numberChangeHandler}\r\n      size=\"3\"\r\n    />\r\n  </td>\r\n}\r\n\r\nconst MethodObjectForm = ({ type,\r\n  object,\r\n  idx,\r\n  arrayToDisplay,\r\n  nameChangeHandler,\r\n  numberChangeHandler,\r\n  removeTypeHandler }) => {\r\n\r\n  return <tr>\r\n    <NameInput\r\n      idx={idx}\r\n      type={type}\r\n      object={object}\r\n      nameChangeHandler={nameChangeHandler}\r\n      key={`${idx}-${object.name}`}\r\n      arrayToDisplay={arrayToDisplay}\r\n    />\r\n    {object[arrayToDisplay].map((currentValue, i) =>\r\n      <NumberInput\r\n        Index={idx}\r\n        idx={i}\r\n        type={type}\r\n        object={currentValue}\r\n        numberChangeHandler={numberChangeHandler}\r\n        key={`${currentValue}-${i}`}\r\n        arrayToDisplay={arrayToDisplay}\r\n      />\r\n    )}\r\n    <td>\r\n      {arrayToDisplay === 'rangesHigh' ? null : <button\r\n        onClick={removeTypeHandler}\r\n        id={`${type}-${idx}`}>\r\n        Remove {object.name}</button>}\r\n    </td>\r\n  </tr>\r\n}\r\n\r\nexport default MethodObjectForm","import React from 'react'\r\n\r\nconst ElementHeader = ({ elements, title }) => {\r\n  return <tr className='greyTopBorder'>\r\n\r\n    <td style={{ textAlign: 'left', verticalAlign: 'bottom' }}>\r\n      <h2>{title}</h2>\r\n    </td>\r\n\r\n    {elements.map(element =>\r\n      <td\r\n        style={{ fontWeight: 'bold' }}\r\n        key={element}>\r\n        {element}\r\n      </td>\r\n    )}\r\n    <td> </td>\r\n  </tr>\r\n}\r\n\r\nexport default ElementHeader","import React, { useState, useEffect } from 'react'\r\nimport { useParams, useHistory } from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport SingleInput from './SingleInput'\r\nimport UnitInput from './UnitInput'\r\nimport MethodObjectForm from './MethodObjectForm'\r\nimport ElementHeader from './ElementHeader'\r\n\r\nconst EditMethodForm = () => {\r\n\r\n  const [method, setMethod] = useState()\r\n  const methodName = useParams().name\r\n  const history = useHistory()\r\n\r\n  const baseUrl = 'http://localhost:3001'\r\n\r\n  useEffect(() => {\r\n    axios.get(`${baseUrl}/api/methods`)\r\n      .then(response => {\r\n        setMethod(response.data.find(m => m.name === methodName))\r\n      })\r\n  }, [methodName])\r\n\r\n  if (!method) {\r\n    return 'Loading...'\r\n  }\r\n\r\n  const methodChangeHandler = (event) => {\r\n    setMethod({\r\n      ...method,\r\n      [event.target.name]: event.target.value\r\n    })\r\n  }\r\n\r\n  const blankArray = [\"LOQs\"]\r\n  const checkStdsArray = [\"expectedValues\"]\r\n  const referenceMaterialsArray = [\"rangesHigh\", \"rangesLow\"]\r\n\r\n  const methodElementChangeHandler = (event, idx) => {\r\n    const updatedMethod = { ...method }\r\n    updatedMethod.elements[idx] = event.target.value\r\n    setMethod(updatedMethod)\r\n  }\r\n\r\n  const methodUnitChangeHandler = (event, idx) => {\r\n    const updatedMethod = { ...method }\r\n    updatedMethod.units[idx] = event.target.value\r\n    setMethod(updatedMethod)\r\n  }\r\n\r\n  const newElementHandler = (idx, add = false) => {\r\n    const updatedMethod = { ...method }\r\n\r\n    const modifyArray = (array, idx, add, toAdd = null) => {\r\n      if (add) {\r\n        array.splice(idx, 0, toAdd)\r\n      } else {\r\n        array.splice(idx, 1)\r\n      }\r\n    }\r\n\r\n    // This next bit looks through the method object for arrays\r\n    // the same length as the list of elements, which we can then\r\n    // lengthen or shorten to add an element.\r\n    const keys = Object.keys(method);\r\n    const startingElements = method.elements.length\r\n\r\n    // Loop through each key of the method object.\r\n    for (const key of keys) {\r\n      // Check if it's an array.\r\n      if (Array.isArray(method[key]) && method[key].length > 0) {\r\n        // If it's an array and not the calStandards array..\r\n        // Added the key.name clause so it doesn't wipe things out when removing elements.\r\n        if (method[key].length === startingElements && key !== 'calStandards' && !method[key][0].name) {\r\n          // Add or remove a value using this function.\r\n          modifyArray(updatedMethod[key], idx, add, '')\r\n\r\n        }\r\n        // If the key holds an object and it has a name key...\r\n        else if (typeof method[key] === 'object' && method[key][0].name) {\r\n          // Cycle through the list looking at each sub-object.\r\n          for (let i = 0; i < method[key].length; i++) {\r\n\r\n            const nestedKeys = Object.keys(method[key][i]);\r\n            for (const nestedKey of nestedKeys) {\r\n              const thisItem = method[key][i][nestedKey];\r\n              // If the key holds an array of the right length,\r\n              // we'll add or remove an item in the right spot.\r\n              if (Array.isArray(thisItem) && thisItem.length === startingElements) {\r\n                modifyArray(thisItem, idx, add, null)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    setMethod(updatedMethod)\r\n  }\r\n\r\n  const inputNumberChangeHandler = (event) => {\r\n    const [type, typeIndex, keyName, finalIndex] = event.target.id.split('~~')\r\n    const updatedMethod = { ...method }\r\n    updatedMethod[type][typeIndex][keyName][finalIndex] = event.target.value\r\n    setMethod(updatedMethod)\r\n  }\r\n\r\n  const inputNameChangeHandler = (event) => {\r\n    const [type, index] = event.target.id.split('~~')\r\n    const updatedMethod = { ...method }\r\n    updatedMethod[type][index].name = event.target.value\r\n    setMethod(updatedMethod)\r\n  }\r\n\r\n  const saveChanges = event => {\r\n    event.preventDefault()\r\n    console.log('stuff to save:\\n', method)\r\n  }\r\n\r\n  const addTypeHandler = (event) => {\r\n    event.preventDefault()\r\n    const type = event.target.name\r\n    const blankArray = Array(method.elements.length).join('.').split('.')\r\n    const updatedMethod = { ...method }\r\n    switch (type) {\r\n      case 'blanks':\r\n        const newBlank = {\r\n          type: '',\r\n          name: 'New Blank',\r\n          LOQs: blankArray\r\n        }\r\n        updatedMethod[type].push(newBlank)\r\n        setMethod(updatedMethod)\r\n        break\r\n      case 'checkStds':\r\n        const newCheckStd = {\r\n          name: 'New Check Standard',\r\n          expectedValues: blankArray\r\n        }\r\n        updatedMethod[type].push(newCheckStd)\r\n        setMethod(updatedMethod)\r\n        break\r\n      case 'referenceMaterials':\r\n        const secondBlankArray = Array(method.elements.length).join('.').split('.')\r\n        const newReferenceMaterial = {\r\n          name: 'New Ref Material',\r\n          rangesLow: blankArray,\r\n          rangesHigh: secondBlankArray\r\n        }\r\n        updatedMethod[type].push(newReferenceMaterial)\r\n        setMethod(updatedMethod)\r\n        break\r\n      default:\r\n        console.log(`Something went wrong adding new ${event.target.name}`)\r\n        break\r\n    }\r\n  }\r\n\r\n  const removeTypeHandler = (event) => {\r\n    event.preventDefault()\r\n    const [type, idx] = event.target.id.split('-')\r\n    const updatedMethod = { ...method }\r\n    updatedMethod[type].splice(idx, 1)\r\n    setMethod(updatedMethod)\r\n  }\r\n\r\n  const padding = {\r\n    margin: '3px',\r\n    padding: '3px'\r\n  }\r\n\r\n  const smallInput = {\r\n    textAlign: 'center',\r\n    border: '1px solid lightgrey',\r\n    borderRadius: '6px',\r\n    margin: '5px 0 5px 5px'\r\n  }\r\n\r\n\r\n  return <div className='centeredContainerParent' style={{ maxWidth: '98%' }}>\r\n    <div className='centeredContainerChild' style={{ textAlign: 'left', paddingTop: '15px' }}>\r\n      <form>\r\n\r\n        <h1 style={{\r\n          textAlign: 'center',\r\n          border: '2px solid grey',\r\n          padding: '5px',\r\n          borderRadius: '6px',\r\n        }}>\r\n          Editing {method.name}\r\n        </h1>\r\n\r\n        <div className='editTitles'>\r\n\r\n          <label htmlFor=\"name\">Method Name<br /></label>\r\n          <input type=\"text\"\r\n            name=\"name\"\r\n            value={method.name}\r\n            onChange={methodChangeHandler}\r\n            size=\"15\"\r\n          />\r\n\r\n          <br />\r\n\r\n          <label htmlFor=\"description\">Method Description<br /></label>\r\n          <input type=\"text\"\r\n            name=\"description\"\r\n            value={method.description}\r\n            onChange={methodChangeHandler}\r\n            size=\"70\"\r\n          />\r\n\r\n        </div>\r\n\r\n        <br />\r\n\r\n        <label htmlFor=\"sigFigs\">Sig Figs to Display</label>\r\n        <input type=\"text\"\r\n          name=\"sigFigs\"\r\n          value={method.sigFigs}\r\n          onChange={methodChangeHandler}\r\n          size=\"1\"\r\n          style={smallInput}\r\n        />\r\n\r\n        <br />\r\n\r\n        <label htmlFor=\"checkStdTolerance\">Check Standards Tolerance</label>\r\n        <input type=\"text\"\r\n          name=\"checkStdTolerance\"\r\n          value={method.checkStdTolerance * 100}\r\n          onChange={(e) => {\r\n            e.target.value /= 100\r\n            methodChangeHandler(e)\r\n          }}\r\n          size=\"1\"\r\n          style={smallInput}\r\n        />%\r\n\r\n\r\n        <br />\r\n\r\n        <label htmlFor=\"duplicateTolerance\">Duplicate Tolerance</label>\r\n        <input type=\"text\"\r\n          name=\"duplicateTolerance\"\r\n          value={method.duplicateTolerance}\r\n          onChange={methodChangeHandler}\r\n          size=\"1\"\r\n          style={smallInput}\r\n        />%\r\n\r\n        <div style={{ textAlign: 'right' }}>\r\n          <h2>Add Something:</h2>\r\n\r\n          <button onClick={addTypeHandler} name='checkStds' style={padding}>\r\n            Add Check Standard\r\n                </button>\r\n          <button onClick={addTypeHandler} name='blanks' style={padding}>\r\n            Add Blank\r\n                </button>\r\n          <button onClick={addTypeHandler} name='referenceMaterials' style={padding}>\r\n            Add Reference Material\r\n                </button>\r\n        </div>\r\n        <hr />\r\n\r\n\r\n        <table\r\n          cellSpacing='0'\r\n          className='editMethodTable'>\r\n          <thead>\r\n            <tr>\r\n              <th style={{ textAlign: 'left' }}><h2>Elements</h2></th>\r\n              {method.elements.map((element, idx) =>\r\n                <th key={`${element}-${idx}`}>\r\n                  <SingleInput\r\n                    type='elements'\r\n                    element={element}\r\n                    changeHandler={methodElementChangeHandler}\r\n                    elementAdder={newElementHandler}\r\n                    idx={idx}\r\n                  />\r\n                </th>\r\n              )}\r\n              <td\r\n                onClick={() => newElementHandler(method.elements.length, true)}\r\n                style={{\r\n                  textAlign: 'left',\r\n                  fontSize: '0.55rem',\r\n                  fontWeight: 'bold',\r\n                  cursor: 'pointer'\r\n                }}>\r\n                +\r\n                    </td>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td style={{ textAlign: 'right' }}>Units</td>\r\n              {method.units.map((unit, idx) =>\r\n                <td\r\n                  key={`${method.elements[idx]}-${unit}-${idx}`}>\r\n                  <UnitInput\r\n                    unit={unit}\r\n                    idx={idx}\r\n                    changeHandler={methodUnitChangeHandler}\r\n                  />\r\n                </td>\r\n              )}\r\n              <td> </td>\r\n            </tr>\r\n\r\n            <ElementHeader elements={method.elements} title='Check Standards' />\r\n\r\n            {method.checkStds.map((object, index) =>\r\n              checkStdsArray.map(arrayToDisplay =>\r\n                <MethodObjectForm\r\n                  object={object}\r\n                  idx={index}\r\n                  nameChangeHandler={inputNameChangeHandler}\r\n                  numberChangeHandler={inputNumberChangeHandler}\r\n                  removeTypeHandler={removeTypeHandler}\r\n                  type='checkStds'\r\n                  arrayToDisplay={arrayToDisplay}\r\n                  key={object.name}\r\n                />\r\n              )\r\n            )}\r\n\r\n            <ElementHeader elements={method.elements} title='Blanks' />\r\n\r\n            {method.blanks.map((blank, blankIndex) =>\r\n              blankArray.map(arrayToDisplay =>\r\n                <MethodObjectForm\r\n                  object={blank}\r\n                  idx={blankIndex}\r\n                  nameChangeHandler={inputNameChangeHandler}\r\n                  numberChangeHandler={inputNumberChangeHandler}\r\n                  removeTypeHandler={removeTypeHandler}\r\n                  type='blanks'\r\n                  arrayToDisplay={arrayToDisplay}\r\n                  key={blank.name}\r\n                />\r\n              )\r\n            )}\r\n\r\n            <ElementHeader elements={method.elements} title='Reference Materials' />\r\n\r\n            {method.referenceMaterials.map((object, index) =>\r\n              referenceMaterialsArray.map(arrayToDisplay =>\r\n                <MethodObjectForm\r\n                  object={object}\r\n                  idx={index}\r\n                  nameChangeHandler={inputNameChangeHandler}\r\n                  numberChangeHandler={inputNumberChangeHandler}\r\n                  removeTypeHandler={removeTypeHandler}\r\n                  type='referenceMaterials'\r\n                  arrayToDisplay={arrayToDisplay}\r\n                  key={`${object.name}=${arrayToDisplay}`}\r\n                />\r\n              )\r\n            )}\r\n\r\n            <tr>\r\n              <td colSpan={method.elements.length + 2}>\r\n                <hr /><br />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td> </td>\r\n              {method.elements.map((element, idx) => {\r\n                if (method.elements.length < 2) {\r\n                  return <td key={`remove-element-${element}-${idx}`}>\r\n                    <button onClick={(e) => e.preventDefault()} style={{ color: 'grey' }}>\r\n                      Remove<br />{element}\r\n                    </button>\r\n                  </td>\r\n                }\r\n                return <td key={`remove-element-${element}-${idx}`}>\r\n                  <button onClick={() => newElementHandler(idx, false)} style={{ color: 'red' }}>\r\n                    Remove<br />{element}\r\n                  </button>\r\n                </td>\r\n              }\r\n              )}\r\n              <td> </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n        <hr />\r\n\r\n        <div style={{ textAlign: 'right' }}>\r\n          <div style={{ display: 'inline', textAlign: 'right' }}>\r\n            <button\r\n              type=\"submit\"\r\n              onClick={saveChanges}\r\n              style={{ margin: '15px', padding: '3px' }}\r\n            >\r\n              Save Changes\r\n          </button>\r\n          </div>\r\n          <div style={{ display: 'inline', textAlign: 'left' }}>\r\n            <button\r\n              type=\"submit\"\r\n              onClick={() => history.push('/')}\r\n              style={{ margin: '15px', padding: '3px' }}\r\n            >\r\n              Cancel and Leave\r\n          </button>\r\n          </div>\r\n        </div>\r\n\r\n      </form>\r\n    </div >\r\n  </div >\r\n}\r\n\r\nexport default EditMethodForm","import React, { useState, useEffect } from 'react'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route, Switch\r\n} from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport Helmet from 'react-helmet'\r\n\r\nimport MethodSelect from './components/MethodSelect'\r\nimport Report from './components/Report/index'\r\nimport Method from './components/Method'\r\nimport EditMethodForm from './components/Editing/EditMethodForm'\r\n\r\nconst App = () => {\r\n  const [error, setError] = useState(null)\r\n  const [data, setData] = useState()\r\n  const [method, setMethod] = useState()\r\n  const [methods, setMethods] = useState()\r\n\r\n  const baseUrl = '/api'\r\n\r\n  useEffect(() => {\r\n    const allMethods = axios.get(`${baseUrl}/methods`)\r\n    allMethods.then(response => setMethods(response.data))\r\n  }, [])\r\n\r\n  return <div>\r\n    <Helmet>\r\n      <meta charSet=\"utf-8\" />\r\n      <title>Agilent 7900 Reporting Application</title>\r\n    </Helmet>\r\n\r\n    <Router>\r\n      <Switch>\r\n\r\n        <Route path='/method'>\r\n          <Method method={method} />\r\n        </Route>\r\n\r\n        <Route path='/report'>\r\n          <Report method={method} data={data} setError={setError} />\r\n        </Route>\r\n\r\n        <Route path='/edit/:name'>\r\n          <EditMethodForm />\r\n        </Route>\r\n\r\n        <Route path='/:name'>\r\n          <MethodSelect\r\n            error={error}\r\n            method={method}\r\n            methods={methods}\r\n            setMethod={setMethod}\r\n            setError={setError}\r\n            setData={setData} />\r\n        </Route>\r\n\r\n        <Route path='/'>\r\n          <MethodSelect method={method} methods={methods} setMethod={setMethod} error={error} />\r\n        </Route>\r\n\r\n      </Switch>\r\n    </Router>\r\n  </div>\r\n\r\n}\r\nexport default App\r\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport App from './App'\n\nimport './styles.css'\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}